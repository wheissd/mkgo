package service

{{- $root := . }}
import (
{{- if gt (len .Entities) 0 }}
    "context"
{{- end }}
"go.uber.org/fx"

{{ $pkg := .Pkg }}
{{ $entPath := .EntPath }}
{{- if gt (len .Entities) 0 }}
    "{{ $pkg }}/{{ .RootPkg }}{{ .EntPath }}"
    "{{ $pkg }}/{{ .RootPkg }}{{ .EntPath }}/gen"
{{- end }}
{{- range $i, $e := .Entities }}
    "{{ $pkg }}/{{ $root.RootPkg }}{{ $entPath }}/gen/{{ lower .Name }}"
    "github.com/google/uuid"
{{- end }}
    "go.uber.org/zap"
)

const (
    errInvalidOrder = "invalid order by"
)

{{- define "listQuery" }}
    {{- $q := .QueryVar }}
    {{- $root := .Root }}
    {{- $e := .Entity }}
    {{ .QueryVar }} := s.client.{{ .Entity.Name }}.Query()
    {{- if .WithModifier }}
    if err := s.{{ .Entity.Name }}ListQueryModifier(ctx, {{ .QueryVar }}); err != nil {
    return {{ .Entity.Name }}List{}, err
    }
    {{- end }}
    {{- range $i, $edge := .Entity.Edges }}
        {{- if and $edge.Inverse $edge.HasField }}
            if params.Filter{{ pascal $edge.Name }}ID.IsSet() {
            {{ $q }}.Where({{ lower $e.Name }}.{{ pascal $edge.FieldName }}EQ(params.Filter{{ pascal $edge.Name }}ID.Get()))
            }
        {{- else }}
            if params.Filter{{ pascal $edge.Name }}IDs.IsSet() {
            {{ $q }}.Where({{ lower $e.Name }}.Has{{ pascal $edge.Name }}With({{ lower $edge.EntityName }}.IDIn(params.Filter{{ pascal $edge.Name }}IDs.Get()...)))
            }
        {{- end }}
    {{- end }}
    {{- range .Entity.Fields }}
        {{- if not .Edge }}
            if params.Filter{{ pascal .Name }}.IsSet() {
                {{ $q }}.Where({{ lower $e.Name }}.{{ pascal .Name }}EQ({{ if .Enum }}{{ camel $e.Name }}.{{ pascal .Name }}({{ end }}params.Filter{{ pascal .Name }}.Get(){{ if .Enum }}){{ end }}))
            }
            {{- if .Type.Type.CanRange }}
            if params.FilterRangeFrom{{ pascal .Name }}.IsSet() {
                {{ $q }}.Where({{ lower $e.Name }}.{{ pascal .Name }}GT(params.FilterRangeFrom{{ pascal .Name}}.Get()))
            }
            if params.FilterRangeTo{{ pascal .Name }}.IsSet() {
                {{ $q }}.Where({{ lower $e.Name }}.{{ pascal .Name }}LT(params.FilterRangeTo{{ pascal .Name}}.Get()))
            }
            {{- end }}
        {{- end }}
    {{- end }}
    {{- if .WithModifier }}
    if params.OrderBy != nil {
        if len(params.OrderBy) > len({{ $e.Name }}AcceptedOrderBy) {
            return {{ .Entity.Name }}List{}, errors.New(errInvalidOrder)
        }
        qOrderBy := make([]{{ lower $e.Name }}.OrderOption, 0, len(params.OrderBy))
        for _, orderByRaw := range params.OrderBy {
            orderBySplitted := strings.Split(orderByRaw, ":")
            if len(orderBySplitted) != 2 && len(orderBySplitted) != 1 {
                return {{ .Entity.Name }}List{}, errors.New(errInvalidOrder)
            }
            orderBy := orderBySplitted[0]
            orderByDirection := sql.OrderAsc()
            if len(orderBySplitted) == 2 && orderBySplitted[1] == "desc" {
                orderByDirection = sql.OrderDesc()
            }
            if !lo.Contains({{ $e.Name }}AcceptedOrderBy, orderBy) {
                return {{ .Entity.Name }}List{}, errors.New("invalid order by")
            }
        {{- range .Entity.Fields }}
            {{- if not .Edge }}
                if orderBy == {{ $e.Name }}OrderBy{{ pascal .Name }} {
                    qOrderBy = append(qOrderBy, {{ lower $e.Name }}.By{{ pascal .Name }}(orderByDirection))
                }
            {{- end }}
        {{- end }}
        }
        {{ $q }}.Order(qOrderBy...)
    }
    {{- end }}
{{- end }}

type Service struct {
{{- if gt (len .Entities) 0 }}
    client *gen.Client
{{- end }}
logger *zap.Logger
{{- range .Entities }}
    {{ .Name }}ListQueryModifier {{ .Name }}QueryModifier
    {{ .Name }}ReadQueryModifier {{ .Name }}QueryModifier
{{- end }}
}

func New({{- if gt (len .Entities) 0 }}client *gen.Client, {{ end }}logger *zap.Logger) *Service {
return &Service{
{{- if gt (len .Entities) 0 }}
    client: client,
{{- end }}
logger: logger,
{{- range .Entities }}
    {{ .Name }}ListQueryModifier: noOp{{ .Name }}QueryModifier,
    {{ .Name }}ReadQueryModifier: noOp{{ .Name }}QueryModifier,
{{- end }}
}
}

{{- define "writeManyEdge" }}
{{- $edge := . }}
    if len(req.Edges.{{ pascal .Name }}) > 0 {
        edgs := make([]*gen.{{ .EntityName }}Create, 0, len(req.Edges.{{ pascal .Name }}))
        for i := range req.Edges.{{ pascal .Name }} {
            eCQ := tx.{{ pascal .EntityName }}.
                Create()
            {{- range .Entity.Fields }}
                {{- if and (not .Immutable) (not .AutoUpdate) (not .Phantom) (not (techField .)) (not (eq .Name "id")) }}
                {{- if not .Required }}
                    if req.Edges.{{ pascal .Name }}[i].{{ pascal .Name }}.IsSet() {
                {{- end }}
                    eCQ.Set{{ pascal .Name }}({{ setEdgeReqFormat $edge . }})
                {{- if not .Required }}
                    }
                {{- end }}
                {{- end }}
            {{- end }}
            edgs = append(edgs, eCQ)
                
        }
        cb := tx.ProductPicture.CreateBulk(edgs...)
        edge{{ pascal .Name }} , err = cb.Save(ctx)
        if err != nil {
            return errors.Errorf("cb.Save %v", err)
        }
        e.Edges.{{ pascal .Name }} = edge{{ pascal .Name }}
    }
{{- end }}

{{- define "writeManyQueryEdge" }}

{{- end }}

{{- define "updateManyEdge" }}
{{- end }}

{{ range $i, $e := .Entities }}
    func (s *Service) Create{{ .Name }}(ctx context.Context, req Create{{ .Name }}) ({{ .Name }}, error) {
        var (
            e *gen.{{ pascal .Name }}
            {{ if $e.HasCreateEdges }}
            {{- range $e.Edges }}
                {{- if .WithCreate }}
                {{- if .ToMany }}
                edge{{ pascal .Name }} []*gen.{{ .EntityName }}
                {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
        )
        err := ent.WithTx(ctx, s.client, func(tx *gen.Tx) error {
        b := tx.{{ .Name }}.Create()

        // Add all fields.
        {{- range $i, $f := .Fields }}
            {{- if and (not $f.Immutable) (not $f.AutoUpdate) (not $f.Phantom) (not (techField .)) (not (eq .Name "id")) }}
            {{- if not $f.Required }}
                if req.{{ pascal $f.Name }}.IsSet() {
            {{- end }}
            b.Set{{ pascal .Name }}({{ setReqFormat $e . }})
            {{- if not $f.Required }}
                }
            {{- end }}
            {{- end }}
        {{- end }}

        // Set relations
        {{- range $i, $f := .Edges }}
            {{- if and .Inverse .HasField }}
                b.Set{{ pascal .Name }}ID(req.{{ pascal .FieldName }})
            {{- end }}
        {{- end }}
        var err error
        // Persist to storage.
        e, err = b.Save(ctx)
        if err != nil {
        return err
        }

        {{ if $e.HasCreateEdges }}
            {{- range $e.Edges }}
                {{- if .WithCreate }}
                {{- if .ToMany }}
                {{- template "writeManyEdge" . }}
                {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}

        return nil
        })
        if err != nil {
            return {{ pascal .Name }}{}, errors.Errorf("ent.WithTx %v", err)
        }
        response := New{{ .Name }}(e)
        return response, nil
    }

    func (s *Service) Update{{ .Name }}(ctx context.Context, id uuid.UUID, req Update{{ .Name }}) ({{ .Name }}, error) {
        b := s.client.{{ .Name }}.UpdateOneID(id)

        // Add all fields.
        {{- range $i, $f := .Fields }}
            {{- if isIDField $f }}{{continue}}{{end}}
            {{- if and (not $f.Immutable) (not $f.AutoUpdate) (not $f.Phantom) (not (eq $f.Name "deleted_time")) }}
                if req.{{ pascal .Name }}.IsSet() {
                b.Set{{ pascal .Name }}({{ updateReqFormat $e . }})
                }
            {{- end }}
        {{- end }}
        // Set relations.
        {{- range $i, $f := .Edges }}
            {{ if and .Inverse .HasField }}
                if req.{{ pascal .FieldName }}.IsSet() {
                b.Set{{ pascal .Name }}ID(req.{{ pascal .FieldName }}.Get())
                }
            {{ end }}
        {{- end }}
        // Persist to storage.
        e, err := b.Save(ctx)
        if err != nil {
        return {{ .Name }}{}, err
        }

        {{ if $e.HasUpdateEdges }}
            {{- template "updateManyEdge" $e }}
        {{- end }}

        // Reload the entity to attach all eager-loaded edges.
        q := s.client.{{ .Name }}.Query().Where({{ lower .Name }}.ID(e.ID))
        e, err = q.Only(ctx)
        if err != nil {
        // This should never happen.
        return {{ .Name }}{}, err
        }
        response := New{{ .Name }}(e)
        return response, nil
    }

    // Delete{{ .Name }} handles DELETE /{{ lower .Name }}/{id} requests.
    func (s *Service) Delete{{ .Name }}(ctx context.Context, id uuid.UUID) error {
        err := s.client.{{ .Name }}.DeleteOneID(id).Exec(ctx)
        if err != nil {
        switch {
        case gen.IsNotFound(err):
        return err
        case gen.IsConstraintError(err):
        return err
        default:
        // Let the server handle the error.
        return err
        }
        }
        return nil
    }

    func (s *Service) List{{ .Name }}(ctx context.Context, params {{ .Name }}ListParams) ({{ .Name }}List, error) {
        {{ template "listQuery" dict "Entity" $e "QueryVar" "q" "Root" $root "WithModifier" true }}
        {{ template "queryEdges" . }}
        page := 1
        if params.Page.IsSet() {
            page = params.Page.Get()
        }
        itemsPerPage := 30
        if params.ItemsPerPage.IsSet() {
            itemsPerPage = params.ItemsPerPage.Get()
        }
        var countRes []struct {
            Count int
        }
        {{ template "listQuery" dict "Entity" $e "QueryVar" "cQ" "Root" $root }}
        err := cQ.Aggregate(gen.Count()).Scan(ctx, &countRes)
        if err != nil {
            return {{ .Name }}List{}, err
        }

        q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

        es, err := q.All(ctx)
        if err != nil {
        switch {
            case gen.IsNotFound(err):
                return {{ .Name }}List{}, err
            case gen.IsNotSingular(err):
                return {{ .Name }}List{}, err
            default:
            // Let the server handle the error.
                return {{ .Name }}List{}, err
            }
        }
        r := New{{ .Name }}List(es)
        response := {{ .Name }}List{}
        response.Items = r
        response.Count = countRes[0].Count

        return response, nil
    }

    func (s *Service) Read{{ .Name }}(ctx context.Context, params {{ .Name }}ReadParams) ({{ .Name }}, error) {
        q := s.client.{{ .Name }}.Query().Where({{ lower .Name }}.IDEQ(params.ID))
        if err := s.{{ .Name }}ReadQueryModifier(ctx, q); err != nil {
            return {{ .Name }}{}, err
        }
        {{ template "queryEdges" . }}
        e, err := q.Only(ctx)
        if err != nil {
            switch {
            case gen.IsNotFound(err):
                return {{ .Name }}{}, err
            case gen.IsNotSingular(err):
                return {{ .Name }}{}, err
            default:
                // Let the server handle the error.
                return {{ .Name }}{}, err
            }
        }

        return New{{ .Name }}(e), nil
    }

{{ end }}

var Module = fx.Module(
    "service",
    fx.Provide(
        New,
    ),
)
