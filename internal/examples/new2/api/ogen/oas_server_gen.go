// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateHuman implements createHuman operation.
	//
	// Create a new Human  and persists it to storage.
	//
	// POST /human
	CreateHuman(ctx context.Context, req *CreateHuman) (CreateHumanRes, error)
	// DeleteHuman implements deleteHuman operation.
	//
	// Delete Human.
	//
	// DELETE /human/{id}
	DeleteHuman(ctx context.Context, params DeleteHumanParams) (DeleteHumanRes, error)
	// ListHuman implements listHuman operation.
	//
	// List for Humans.
	//
	// GET /human
	ListHuman(ctx context.Context, params ListHumanParams) (ListHumanRes, error)
	// ReadHuman implements readHuman operation.
	//
	// Finds the Human with the requested ID and returns it.
	//
	// GET /human/{id}
	ReadHuman(ctx context.Context, params ReadHumanParams) (ReadHumanRes, error)
	// UpdateHuman implements updateHuman operation.
	//
	// Update Human  and persists it to storage.
	//
	// PUT /human/{id}
	UpdateHuman(ctx context.Context, req *UpdateHuman, params UpdateHumanParams) (UpdateHumanRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
