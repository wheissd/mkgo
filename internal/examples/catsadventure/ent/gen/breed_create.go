// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/breed"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/cat"
)

// BreedCreate is the builder for creating a Breed entity.
type BreedCreate struct {
	config
	mutation *BreedMutation
	hooks    []Hook
}

// SetDeletedTime sets the "deleted_time" field.
func (bc *BreedCreate) SetDeletedTime(t time.Time) *BreedCreate {
	bc.mutation.SetDeletedTime(t)
	return bc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (bc *BreedCreate) SetNillableDeletedTime(t *time.Time) *BreedCreate {
	if t != nil {
		bc.SetDeletedTime(*t)
	}
	return bc
}

// SetCreateTime sets the "create_time" field.
func (bc *BreedCreate) SetCreateTime(t time.Time) *BreedCreate {
	bc.mutation.SetCreateTime(t)
	return bc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bc *BreedCreate) SetNillableCreateTime(t *time.Time) *BreedCreate {
	if t != nil {
		bc.SetCreateTime(*t)
	}
	return bc
}

// SetUpdateTime sets the "update_time" field.
func (bc *BreedCreate) SetUpdateTime(t time.Time) *BreedCreate {
	bc.mutation.SetUpdateTime(t)
	return bc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bc *BreedCreate) SetNillableUpdateTime(t *time.Time) *BreedCreate {
	if t != nil {
		bc.SetUpdateTime(*t)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BreedCreate) SetName(s string) *BreedCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BreedCreate) SetID(u uuid.UUID) *BreedCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BreedCreate) SetNillableID(u *uuid.UUID) *BreedCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddCatIDs adds the "cats" edge to the Cat entity by IDs.
func (bc *BreedCreate) AddCatIDs(ids ...uuid.UUID) *BreedCreate {
	bc.mutation.AddCatIDs(ids...)
	return bc
}

// AddCats adds the "cats" edges to the Cat entity.
func (bc *BreedCreate) AddCats(c ...*Cat) *BreedCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bc.AddCatIDs(ids...)
}

// Mutation returns the BreedMutation object of the builder.
func (bc *BreedCreate) Mutation() *BreedMutation {
	return bc.mutation
}

// Save creates the Breed in the database.
func (bc *BreedCreate) Save(ctx context.Context) (*Breed, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BreedCreate) SaveX(ctx context.Context) *Breed {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BreedCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BreedCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BreedCreate) defaults() {
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := breed.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := breed.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := breed.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BreedCreate) check() error {
	if _, ok := bc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`gen: missing required field "Breed.create_time"`)}
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`gen: missing required field "Breed.update_time"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Breed.name"`)}
	}
	return nil
}

func (bc *BreedCreate) sqlSave(ctx context.Context) (*Breed, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BreedCreate) createSpec() (*Breed, *sqlgraph.CreateSpec) {
	var (
		_node = &Breed{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(breed.Table, sqlgraph.NewFieldSpec(breed.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.DeletedTime(); ok {
		_spec.SetField(breed.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.SetField(breed.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.SetField(breed.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(breed.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := bc.mutation.CatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   breed.CatsTable,
			Columns: []string{breed.CatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BreedCreateBulk is the builder for creating many Breed entities in bulk.
type BreedCreateBulk struct {
	config
	err      error
	builders []*BreedCreate
}

// Save creates the Breed entities in the database.
func (bcb *BreedCreateBulk) Save(ctx context.Context) ([]*Breed, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Breed, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BreedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BreedCreateBulk) SaveX(ctx context.Context) []*Breed {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BreedCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BreedCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
