// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/fathercat"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/predicate"
)

// FatherCatUpdate is the builder for updating FatherCat entities.
type FatherCatUpdate struct {
	config
	hooks    []Hook
	mutation *FatherCatMutation
}

// Where appends a list predicates to the FatherCatUpdate builder.
func (fcu *FatherCatUpdate) Where(ps ...predicate.FatherCat) *FatherCatUpdate {
	fcu.mutation.Where(ps...)
	return fcu
}

// SetDeletedTime sets the "deleted_time" field.
func (fcu *FatherCatUpdate) SetDeletedTime(t time.Time) *FatherCatUpdate {
	fcu.mutation.SetDeletedTime(t)
	return fcu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fcu *FatherCatUpdate) SetNillableDeletedTime(t *time.Time) *FatherCatUpdate {
	if t != nil {
		fcu.SetDeletedTime(*t)
	}
	return fcu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fcu *FatherCatUpdate) ClearDeletedTime() *FatherCatUpdate {
	fcu.mutation.ClearDeletedTime()
	return fcu
}

// SetUpdateTime sets the "update_time" field.
func (fcu *FatherCatUpdate) SetUpdateTime(t time.Time) *FatherCatUpdate {
	fcu.mutation.SetUpdateTime(t)
	return fcu
}

// SetName sets the "name" field.
func (fcu *FatherCatUpdate) SetName(s string) *FatherCatUpdate {
	fcu.mutation.SetName(s)
	return fcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcu *FatherCatUpdate) SetNillableName(s *string) *FatherCatUpdate {
	if s != nil {
		fcu.SetName(*s)
	}
	return fcu
}

// Mutation returns the FatherCatMutation object of the builder.
func (fcu *FatherCatUpdate) Mutation() *FatherCatMutation {
	return fcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fcu *FatherCatUpdate) Save(ctx context.Context) (int, error) {
	fcu.defaults()
	return withHooks(ctx, fcu.sqlSave, fcu.mutation, fcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcu *FatherCatUpdate) SaveX(ctx context.Context) int {
	affected, err := fcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fcu *FatherCatUpdate) Exec(ctx context.Context) error {
	_, err := fcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcu *FatherCatUpdate) ExecX(ctx context.Context) {
	if err := fcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcu *FatherCatUpdate) defaults() {
	if _, ok := fcu.mutation.UpdateTime(); !ok {
		v := fathercat.UpdateDefaultUpdateTime()
		fcu.mutation.SetUpdateTime(v)
	}
}

func (fcu *FatherCatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(fathercat.Table, fathercat.Columns, sqlgraph.NewFieldSpec(fathercat.FieldID, field.TypeUUID))
	if ps := fcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcu.mutation.DeletedTime(); ok {
		_spec.SetField(fathercat.FieldDeletedTime, field.TypeTime, value)
	}
	if fcu.mutation.DeletedTimeCleared() {
		_spec.ClearField(fathercat.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := fcu.mutation.UpdateTime(); ok {
		_spec.SetField(fathercat.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := fcu.mutation.Name(); ok {
		_spec.SetField(fathercat.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fathercat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fcu.mutation.done = true
	return n, nil
}

// FatherCatUpdateOne is the builder for updating a single FatherCat entity.
type FatherCatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FatherCatMutation
}

// SetDeletedTime sets the "deleted_time" field.
func (fcuo *FatherCatUpdateOne) SetDeletedTime(t time.Time) *FatherCatUpdateOne {
	fcuo.mutation.SetDeletedTime(t)
	return fcuo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fcuo *FatherCatUpdateOne) SetNillableDeletedTime(t *time.Time) *FatherCatUpdateOne {
	if t != nil {
		fcuo.SetDeletedTime(*t)
	}
	return fcuo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (fcuo *FatherCatUpdateOne) ClearDeletedTime() *FatherCatUpdateOne {
	fcuo.mutation.ClearDeletedTime()
	return fcuo
}

// SetUpdateTime sets the "update_time" field.
func (fcuo *FatherCatUpdateOne) SetUpdateTime(t time.Time) *FatherCatUpdateOne {
	fcuo.mutation.SetUpdateTime(t)
	return fcuo
}

// SetName sets the "name" field.
func (fcuo *FatherCatUpdateOne) SetName(s string) *FatherCatUpdateOne {
	fcuo.mutation.SetName(s)
	return fcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fcuo *FatherCatUpdateOne) SetNillableName(s *string) *FatherCatUpdateOne {
	if s != nil {
		fcuo.SetName(*s)
	}
	return fcuo
}

// Mutation returns the FatherCatMutation object of the builder.
func (fcuo *FatherCatUpdateOne) Mutation() *FatherCatMutation {
	return fcuo.mutation
}

// Where appends a list predicates to the FatherCatUpdate builder.
func (fcuo *FatherCatUpdateOne) Where(ps ...predicate.FatherCat) *FatherCatUpdateOne {
	fcuo.mutation.Where(ps...)
	return fcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fcuo *FatherCatUpdateOne) Select(field string, fields ...string) *FatherCatUpdateOne {
	fcuo.fields = append([]string{field}, fields...)
	return fcuo
}

// Save executes the query and returns the updated FatherCat entity.
func (fcuo *FatherCatUpdateOne) Save(ctx context.Context) (*FatherCat, error) {
	fcuo.defaults()
	return withHooks(ctx, fcuo.sqlSave, fcuo.mutation, fcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fcuo *FatherCatUpdateOne) SaveX(ctx context.Context) *FatherCat {
	node, err := fcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fcuo *FatherCatUpdateOne) Exec(ctx context.Context) error {
	_, err := fcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcuo *FatherCatUpdateOne) ExecX(ctx context.Context) {
	if err := fcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcuo *FatherCatUpdateOne) defaults() {
	if _, ok := fcuo.mutation.UpdateTime(); !ok {
		v := fathercat.UpdateDefaultUpdateTime()
		fcuo.mutation.SetUpdateTime(v)
	}
}

func (fcuo *FatherCatUpdateOne) sqlSave(ctx context.Context) (_node *FatherCat, err error) {
	_spec := sqlgraph.NewUpdateSpec(fathercat.Table, fathercat.Columns, sqlgraph.NewFieldSpec(fathercat.FieldID, field.TypeUUID))
	id, ok := fcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "FatherCat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fathercat.FieldID)
		for _, f := range fields {
			if !fathercat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != fathercat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fcuo.mutation.DeletedTime(); ok {
		_spec.SetField(fathercat.FieldDeletedTime, field.TypeTime, value)
	}
	if fcuo.mutation.DeletedTimeCleared() {
		_spec.ClearField(fathercat.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := fcuo.mutation.UpdateTime(); ok {
		_spec.SetField(fathercat.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := fcuo.mutation.Name(); ok {
		_spec.SetField(fathercat.FieldName, field.TypeString, value)
	}
	_node = &FatherCat{config: fcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fathercat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fcuo.mutation.done = true
	return _node, nil
}
