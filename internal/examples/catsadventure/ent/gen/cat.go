// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/breed"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/cat"
)

// Cat is the model entity for the Cat schema.
type Cat struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime *time.Time `json:"deleted_time,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Идентификатор локации
	BreedID uuid.UUID `json:"breed_id,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed int64 `json:"speed,omitempty"`
	// Дата начала
	DateFrom time.Time `json:"date_from,omitempty"`
	// Тип
	Type cat.Type `json:"type,omitempty"`
	// Другой тип
	OtherType cat.OtherType `json:"other_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CatQuery when eager-loading is set.
	Edges        CatEdges `json:"edges"`
	selectValues sql.SelectValues

	// PhantomField defined by template.
	PhantomField string `json:"phantom_field,omitempty"`
}

// CatEdges holds the relations/edges for other nodes in the graph.
type CatEdges struct {
	// Kittens holds the value of the kittens edge.
	Kittens []*Kitten `json:"kittens,omitempty"`
	// Breed holds the value of the breed edge.
	Breed *Breed `json:"breed,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KittensOrErr returns the Kittens value or an error if the edge
// was not loaded in eager-loading.
func (e CatEdges) KittensOrErr() ([]*Kitten, error) {
	if e.loadedTypes[0] {
		return e.Kittens, nil
	}
	return nil, &NotLoadedError{edge: "kittens"}
}

// BreedOrErr returns the Breed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CatEdges) BreedOrErr() (*Breed, error) {
	if e.loadedTypes[1] {
		if e.Breed == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: breed.Label}
		}
		return e.Breed, nil
	}
	return nil, &NotLoadedError{edge: "breed"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cat.FieldSpeed:
			values[i] = new(sql.NullInt64)
		case cat.FieldName, cat.FieldType, cat.FieldOtherType:
			values[i] = new(sql.NullString)
		case cat.FieldDeletedTime, cat.FieldCreateTime, cat.FieldUpdateTime, cat.FieldDateFrom:
			values[i] = new(sql.NullTime)
		case cat.FieldID, cat.FieldBreedID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cat fields.
func (c *Cat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cat.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				c.DeletedTime = new(time.Time)
				*c.DeletedTime = value.Time
			}
		case cat.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case cat.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case cat.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cat.FieldBreedID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field breed_id", values[i])
			} else if value != nil {
				c.BreedID = *value
			}
		case cat.FieldSpeed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				c.Speed = value.Int64
			}
		case cat.FieldDateFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_from", values[i])
			} else if value.Valid {
				c.DateFrom = value.Time
			}
		case cat.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = cat.Type(value.String)
			}
		case cat.FieldOtherType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field other_type", values[i])
			} else if value.Valid {
				c.OtherType = cat.OtherType(value.String)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cat.
// This includes values selected through modifiers, order, etc.
func (c *Cat) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryKittens queries the "kittens" edge of the Cat entity.
func (c *Cat) QueryKittens() *KittenQuery {
	return NewCatClient(c.config).QueryKittens(c)
}

// QueryBreed queries the "breed" edge of the Cat entity.
func (c *Cat) QueryBreed() *BreedQuery {
	return NewCatClient(c.config).QueryBreed(c)
}

// Update returns a builder for updating this Cat.
// Note that you need to call Cat.Unwrap() before calling this method if this Cat
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cat) Update() *CatUpdateOne {
	return NewCatClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cat) Unwrap() *Cat {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("gen: Cat is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cat) String() string {
	var builder strings.Builder
	builder.WriteString("Cat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("breed_id=")
	builder.WriteString(fmt.Sprintf("%v", c.BreedID))
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(fmt.Sprintf("%v", c.Speed))
	builder.WriteString(", ")
	builder.WriteString("date_from=")
	builder.WriteString(c.DateFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("other_type=")
	builder.WriteString(fmt.Sprintf("%v", c.OtherType))
	builder.WriteByte(')')
	return builder.String()
}

// Cats is a parsable slice of Cat.
type Cats []*Cat
