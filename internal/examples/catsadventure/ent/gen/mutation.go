// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/breed"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/cat"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/fathercat"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/kitten"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBreed     = "Breed"
	TypeCat       = "Cat"
	TypeFatherCat = "FatherCat"
	TypeKitten    = "Kitten"
)

// BreedMutation represents an operation that mutates the Breed nodes in the graph.
type BreedMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	deleted_time  *time.Time
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	cats          map[uuid.UUID]struct{}
	removedcats   map[uuid.UUID]struct{}
	clearedcats   bool
	done          bool
	oldValue      func(context.Context) (*Breed, error)
	predicates    []predicate.Breed
}

var _ ent.Mutation = (*BreedMutation)(nil)

// breedOption allows management of the mutation configuration using functional options.
type breedOption func(*BreedMutation)

// newBreedMutation creates new mutation for the Breed entity.
func newBreedMutation(c config, op Op, opts ...breedOption) *BreedMutation {
	m := &BreedMutation{
		config:        c,
		op:            op,
		typ:           TypeBreed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBreedID sets the ID field of the mutation.
func withBreedID(id uuid.UUID) breedOption {
	return func(m *BreedMutation) {
		var (
			err   error
			once  sync.Once
			value *Breed
		)
		m.oldValue = func(ctx context.Context) (*Breed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Breed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBreed sets the old Breed of the mutation.
func withBreed(node *Breed) breedOption {
	return func(m *BreedMutation) {
		m.oldValue = func(context.Context) (*Breed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BreedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BreedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Breed entities.
func (m *BreedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BreedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BreedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Breed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedTime sets the "deleted_time" field.
func (m *BreedMutation) SetDeletedTime(t time.Time) {
	m.deleted_time = &t
}

// DeletedTime returns the value of the "deleted_time" field in the mutation.
func (m *BreedMutation) DeletedTime() (r time.Time, exists bool) {
	v := m.deleted_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedTime returns the old "deleted_time" field's value of the Breed entity.
// If the Breed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BreedMutation) OldDeletedTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedTime: %w", err)
	}
	return oldValue.DeletedTime, nil
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (m *BreedMutation) ClearDeletedTime() {
	m.deleted_time = nil
	m.clearedFields[breed.FieldDeletedTime] = struct{}{}
}

// DeletedTimeCleared returns if the "deleted_time" field was cleared in this mutation.
func (m *BreedMutation) DeletedTimeCleared() bool {
	_, ok := m.clearedFields[breed.FieldDeletedTime]
	return ok
}

// ResetDeletedTime resets all changes to the "deleted_time" field.
func (m *BreedMutation) ResetDeletedTime() {
	m.deleted_time = nil
	delete(m.clearedFields, breed.FieldDeletedTime)
}

// SetCreateTime sets the "create_time" field.
func (m *BreedMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BreedMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Breed entity.
// If the Breed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BreedMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BreedMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BreedMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BreedMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Breed entity.
// If the Breed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BreedMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BreedMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *BreedMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BreedMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Breed entity.
// If the Breed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BreedMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BreedMutation) ResetName() {
	m.name = nil
}

// AddCatIDs adds the "cats" edge to the Cat entity by ids.
func (m *BreedMutation) AddCatIDs(ids ...uuid.UUID) {
	if m.cats == nil {
		m.cats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.cats[ids[i]] = struct{}{}
	}
}

// ClearCats clears the "cats" edge to the Cat entity.
func (m *BreedMutation) ClearCats() {
	m.clearedcats = true
}

// CatsCleared reports if the "cats" edge to the Cat entity was cleared.
func (m *BreedMutation) CatsCleared() bool {
	return m.clearedcats
}

// RemoveCatIDs removes the "cats" edge to the Cat entity by IDs.
func (m *BreedMutation) RemoveCatIDs(ids ...uuid.UUID) {
	if m.removedcats == nil {
		m.removedcats = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.cats, ids[i])
		m.removedcats[ids[i]] = struct{}{}
	}
}

// RemovedCats returns the removed IDs of the "cats" edge to the Cat entity.
func (m *BreedMutation) RemovedCatsIDs() (ids []uuid.UUID) {
	for id := range m.removedcats {
		ids = append(ids, id)
	}
	return
}

// CatsIDs returns the "cats" edge IDs in the mutation.
func (m *BreedMutation) CatsIDs() (ids []uuid.UUID) {
	for id := range m.cats {
		ids = append(ids, id)
	}
	return
}

// ResetCats resets all changes to the "cats" edge.
func (m *BreedMutation) ResetCats() {
	m.cats = nil
	m.clearedcats = false
	m.removedcats = nil
}

// Where appends a list predicates to the BreedMutation builder.
func (m *BreedMutation) Where(ps ...predicate.Breed) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BreedMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BreedMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Breed, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BreedMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BreedMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Breed).
func (m *BreedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BreedMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.deleted_time != nil {
		fields = append(fields, breed.FieldDeletedTime)
	}
	if m.create_time != nil {
		fields = append(fields, breed.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, breed.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, breed.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BreedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case breed.FieldDeletedTime:
		return m.DeletedTime()
	case breed.FieldCreateTime:
		return m.CreateTime()
	case breed.FieldUpdateTime:
		return m.UpdateTime()
	case breed.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BreedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case breed.FieldDeletedTime:
		return m.OldDeletedTime(ctx)
	case breed.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case breed.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case breed.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Breed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BreedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case breed.FieldDeletedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedTime(v)
		return nil
	case breed.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case breed.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case breed.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Breed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BreedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BreedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BreedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Breed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BreedMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(breed.FieldDeletedTime) {
		fields = append(fields, breed.FieldDeletedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BreedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BreedMutation) ClearField(name string) error {
	switch name {
	case breed.FieldDeletedTime:
		m.ClearDeletedTime()
		return nil
	}
	return fmt.Errorf("unknown Breed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BreedMutation) ResetField(name string) error {
	switch name {
	case breed.FieldDeletedTime:
		m.ResetDeletedTime()
		return nil
	case breed.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case breed.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case breed.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Breed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BreedMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cats != nil {
		edges = append(edges, breed.EdgeCats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BreedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case breed.EdgeCats:
		ids := make([]ent.Value, 0, len(m.cats))
		for id := range m.cats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BreedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcats != nil {
		edges = append(edges, breed.EdgeCats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BreedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case breed.EdgeCats:
		ids := make([]ent.Value, 0, len(m.removedcats))
		for id := range m.removedcats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BreedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcats {
		edges = append(edges, breed.EdgeCats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BreedMutation) EdgeCleared(name string) bool {
	switch name {
	case breed.EdgeCats:
		return m.clearedcats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BreedMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Breed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BreedMutation) ResetEdge(name string) error {
	switch name {
	case breed.EdgeCats:
		m.ResetCats()
		return nil
	}
	return fmt.Errorf("unknown Breed edge %s", name)
}

// CatMutation represents an operation that mutates the Cat nodes in the graph.
type CatMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	deleted_time   *time.Time
	create_time    *time.Time
	update_time    *time.Time
	name           *string
	speed          *int64
	addspeed       *int64
	date_from      *time.Time
	_type          *cat.Type
	other_type     *cat.OtherType
	clearedFields  map[string]struct{}
	kittens        map[uuid.UUID]struct{}
	removedkittens map[uuid.UUID]struct{}
	clearedkittens bool
	breed          *uuid.UUID
	clearedbreed   bool
	done           bool
	oldValue       func(context.Context) (*Cat, error)
	predicates     []predicate.Cat
}

var _ ent.Mutation = (*CatMutation)(nil)

// catOption allows management of the mutation configuration using functional options.
type catOption func(*CatMutation)

// newCatMutation creates new mutation for the Cat entity.
func newCatMutation(c config, op Op, opts ...catOption) *CatMutation {
	m := &CatMutation{
		config:        c,
		op:            op,
		typ:           TypeCat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCatID sets the ID field of the mutation.
func withCatID(id uuid.UUID) catOption {
	return func(m *CatMutation) {
		var (
			err   error
			once  sync.Once
			value *Cat
		)
		m.oldValue = func(ctx context.Context) (*Cat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCat sets the old Cat of the mutation.
func withCat(node *Cat) catOption {
	return func(m *CatMutation) {
		m.oldValue = func(context.Context) (*Cat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cat entities.
func (m *CatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedTime sets the "deleted_time" field.
func (m *CatMutation) SetDeletedTime(t time.Time) {
	m.deleted_time = &t
}

// DeletedTime returns the value of the "deleted_time" field in the mutation.
func (m *CatMutation) DeletedTime() (r time.Time, exists bool) {
	v := m.deleted_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedTime returns the old "deleted_time" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldDeletedTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedTime: %w", err)
	}
	return oldValue.DeletedTime, nil
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (m *CatMutation) ClearDeletedTime() {
	m.deleted_time = nil
	m.clearedFields[cat.FieldDeletedTime] = struct{}{}
}

// DeletedTimeCleared returns if the "deleted_time" field was cleared in this mutation.
func (m *CatMutation) DeletedTimeCleared() bool {
	_, ok := m.clearedFields[cat.FieldDeletedTime]
	return ok
}

// ResetDeletedTime resets all changes to the "deleted_time" field.
func (m *CatMutation) ResetDeletedTime() {
	m.deleted_time = nil
	delete(m.clearedFields, cat.FieldDeletedTime)
}

// SetCreateTime sets the "create_time" field.
func (m *CatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *CatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *CatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CatMutation) ResetName() {
	m.name = nil
}

// SetBreedID sets the "breed_id" field.
func (m *CatMutation) SetBreedID(u uuid.UUID) {
	m.breed = &u
}

// BreedID returns the value of the "breed_id" field in the mutation.
func (m *CatMutation) BreedID() (r uuid.UUID, exists bool) {
	v := m.breed
	if v == nil {
		return
	}
	return *v, true
}

// OldBreedID returns the old "breed_id" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldBreedID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBreedID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBreedID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBreedID: %w", err)
	}
	return oldValue.BreedID, nil
}

// ResetBreedID resets all changes to the "breed_id" field.
func (m *CatMutation) ResetBreedID() {
	m.breed = nil
}

// SetSpeed sets the "speed" field.
func (m *CatMutation) SetSpeed(i int64) {
	m.speed = &i
	m.addspeed = nil
}

// Speed returns the value of the "speed" field in the mutation.
func (m *CatMutation) Speed() (r int64, exists bool) {
	v := m.speed
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeed returns the old "speed" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldSpeed(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeed: %w", err)
	}
	return oldValue.Speed, nil
}

// AddSpeed adds i to the "speed" field.
func (m *CatMutation) AddSpeed(i int64) {
	if m.addspeed != nil {
		*m.addspeed += i
	} else {
		m.addspeed = &i
	}
}

// AddedSpeed returns the value that was added to the "speed" field in this mutation.
func (m *CatMutation) AddedSpeed() (r int64, exists bool) {
	v := m.addspeed
	if v == nil {
		return
	}
	return *v, true
}

// ResetSpeed resets all changes to the "speed" field.
func (m *CatMutation) ResetSpeed() {
	m.speed = nil
	m.addspeed = nil
}

// SetDateFrom sets the "date_from" field.
func (m *CatMutation) SetDateFrom(t time.Time) {
	m.date_from = &t
}

// DateFrom returns the value of the "date_from" field in the mutation.
func (m *CatMutation) DateFrom() (r time.Time, exists bool) {
	v := m.date_from
	if v == nil {
		return
	}
	return *v, true
}

// OldDateFrom returns the old "date_from" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldDateFrom(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateFrom: %w", err)
	}
	return oldValue.DateFrom, nil
}

// ResetDateFrom resets all changes to the "date_from" field.
func (m *CatMutation) ResetDateFrom() {
	m.date_from = nil
}

// SetType sets the "type" field.
func (m *CatMutation) SetType(c cat.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *CatMutation) GetType() (r cat.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldType(ctx context.Context) (v cat.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CatMutation) ResetType() {
	m._type = nil
}

// SetOtherType sets the "other_type" field.
func (m *CatMutation) SetOtherType(ct cat.OtherType) {
	m.other_type = &ct
}

// OtherType returns the value of the "other_type" field in the mutation.
func (m *CatMutation) OtherType() (r cat.OtherType, exists bool) {
	v := m.other_type
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherType returns the old "other_type" field's value of the Cat entity.
// If the Cat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CatMutation) OldOtherType(ctx context.Context) (v cat.OtherType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherType: %w", err)
	}
	return oldValue.OtherType, nil
}

// ResetOtherType resets all changes to the "other_type" field.
func (m *CatMutation) ResetOtherType() {
	m.other_type = nil
}

// AddKittenIDs adds the "kittens" edge to the Kitten entity by ids.
func (m *CatMutation) AddKittenIDs(ids ...uuid.UUID) {
	if m.kittens == nil {
		m.kittens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.kittens[ids[i]] = struct{}{}
	}
}

// ClearKittens clears the "kittens" edge to the Kitten entity.
func (m *CatMutation) ClearKittens() {
	m.clearedkittens = true
}

// KittensCleared reports if the "kittens" edge to the Kitten entity was cleared.
func (m *CatMutation) KittensCleared() bool {
	return m.clearedkittens
}

// RemoveKittenIDs removes the "kittens" edge to the Kitten entity by IDs.
func (m *CatMutation) RemoveKittenIDs(ids ...uuid.UUID) {
	if m.removedkittens == nil {
		m.removedkittens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.kittens, ids[i])
		m.removedkittens[ids[i]] = struct{}{}
	}
}

// RemovedKittens returns the removed IDs of the "kittens" edge to the Kitten entity.
func (m *CatMutation) RemovedKittensIDs() (ids []uuid.UUID) {
	for id := range m.removedkittens {
		ids = append(ids, id)
	}
	return
}

// KittensIDs returns the "kittens" edge IDs in the mutation.
func (m *CatMutation) KittensIDs() (ids []uuid.UUID) {
	for id := range m.kittens {
		ids = append(ids, id)
	}
	return
}

// ResetKittens resets all changes to the "kittens" edge.
func (m *CatMutation) ResetKittens() {
	m.kittens = nil
	m.clearedkittens = false
	m.removedkittens = nil
}

// ClearBreed clears the "breed" edge to the Breed entity.
func (m *CatMutation) ClearBreed() {
	m.clearedbreed = true
	m.clearedFields[cat.FieldBreedID] = struct{}{}
}

// BreedCleared reports if the "breed" edge to the Breed entity was cleared.
func (m *CatMutation) BreedCleared() bool {
	return m.clearedbreed
}

// BreedIDs returns the "breed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BreedID instead. It exists only for internal usage by the builders.
func (m *CatMutation) BreedIDs() (ids []uuid.UUID) {
	if id := m.breed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBreed resets all changes to the "breed" edge.
func (m *CatMutation) ResetBreed() {
	m.breed = nil
	m.clearedbreed = false
}

// Where appends a list predicates to the CatMutation builder.
func (m *CatMutation) Where(ps ...predicate.Cat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cat).
func (m *CatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CatMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.deleted_time != nil {
		fields = append(fields, cat.FieldDeletedTime)
	}
	if m.create_time != nil {
		fields = append(fields, cat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, cat.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, cat.FieldName)
	}
	if m.breed != nil {
		fields = append(fields, cat.FieldBreedID)
	}
	if m.speed != nil {
		fields = append(fields, cat.FieldSpeed)
	}
	if m.date_from != nil {
		fields = append(fields, cat.FieldDateFrom)
	}
	if m._type != nil {
		fields = append(fields, cat.FieldType)
	}
	if m.other_type != nil {
		fields = append(fields, cat.FieldOtherType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cat.FieldDeletedTime:
		return m.DeletedTime()
	case cat.FieldCreateTime:
		return m.CreateTime()
	case cat.FieldUpdateTime:
		return m.UpdateTime()
	case cat.FieldName:
		return m.Name()
	case cat.FieldBreedID:
		return m.BreedID()
	case cat.FieldSpeed:
		return m.Speed()
	case cat.FieldDateFrom:
		return m.DateFrom()
	case cat.FieldType:
		return m.GetType()
	case cat.FieldOtherType:
		return m.OtherType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cat.FieldDeletedTime:
		return m.OldDeletedTime(ctx)
	case cat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case cat.FieldName:
		return m.OldName(ctx)
	case cat.FieldBreedID:
		return m.OldBreedID(ctx)
	case cat.FieldSpeed:
		return m.OldSpeed(ctx)
	case cat.FieldDateFrom:
		return m.OldDateFrom(ctx)
	case cat.FieldType:
		return m.OldType(ctx)
	case cat.FieldOtherType:
		return m.OldOtherType(ctx)
	}
	return nil, fmt.Errorf("unknown Cat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cat.FieldDeletedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedTime(v)
		return nil
	case cat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case cat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cat.FieldBreedID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBreedID(v)
		return nil
	case cat.FieldSpeed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeed(v)
		return nil
	case cat.FieldDateFrom:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateFrom(v)
		return nil
	case cat.FieldType:
		v, ok := value.(cat.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case cat.FieldOtherType:
		v, ok := value.(cat.OtherType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherType(v)
		return nil
	}
	return fmt.Errorf("unknown Cat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CatMutation) AddedFields() []string {
	var fields []string
	if m.addspeed != nil {
		fields = append(fields, cat.FieldSpeed)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cat.FieldSpeed:
		return m.AddedSpeed()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cat.FieldSpeed:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpeed(v)
		return nil
	}
	return fmt.Errorf("unknown Cat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CatMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cat.FieldDeletedTime) {
		fields = append(fields, cat.FieldDeletedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CatMutation) ClearField(name string) error {
	switch name {
	case cat.FieldDeletedTime:
		m.ClearDeletedTime()
		return nil
	}
	return fmt.Errorf("unknown Cat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CatMutation) ResetField(name string) error {
	switch name {
	case cat.FieldDeletedTime:
		m.ResetDeletedTime()
		return nil
	case cat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case cat.FieldName:
		m.ResetName()
		return nil
	case cat.FieldBreedID:
		m.ResetBreedID()
		return nil
	case cat.FieldSpeed:
		m.ResetSpeed()
		return nil
	case cat.FieldDateFrom:
		m.ResetDateFrom()
		return nil
	case cat.FieldType:
		m.ResetType()
		return nil
	case cat.FieldOtherType:
		m.ResetOtherType()
		return nil
	}
	return fmt.Errorf("unknown Cat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.kittens != nil {
		edges = append(edges, cat.EdgeKittens)
	}
	if m.breed != nil {
		edges = append(edges, cat.EdgeBreed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cat.EdgeKittens:
		ids := make([]ent.Value, 0, len(m.kittens))
		for id := range m.kittens {
			ids = append(ids, id)
		}
		return ids
	case cat.EdgeBreed:
		if id := m.breed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedkittens != nil {
		edges = append(edges, cat.EdgeKittens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cat.EdgeKittens:
		ids := make([]ent.Value, 0, len(m.removedkittens))
		for id := range m.removedkittens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedkittens {
		edges = append(edges, cat.EdgeKittens)
	}
	if m.clearedbreed {
		edges = append(edges, cat.EdgeBreed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CatMutation) EdgeCleared(name string) bool {
	switch name {
	case cat.EdgeKittens:
		return m.clearedkittens
	case cat.EdgeBreed:
		return m.clearedbreed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CatMutation) ClearEdge(name string) error {
	switch name {
	case cat.EdgeBreed:
		m.ClearBreed()
		return nil
	}
	return fmt.Errorf("unknown Cat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CatMutation) ResetEdge(name string) error {
	switch name {
	case cat.EdgeKittens:
		m.ResetKittens()
		return nil
	case cat.EdgeBreed:
		m.ResetBreed()
		return nil
	}
	return fmt.Errorf("unknown Cat edge %s", name)
}

// FatherCatMutation represents an operation that mutates the FatherCat nodes in the graph.
type FatherCatMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	deleted_time  *time.Time
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FatherCat, error)
	predicates    []predicate.FatherCat
}

var _ ent.Mutation = (*FatherCatMutation)(nil)

// fathercatOption allows management of the mutation configuration using functional options.
type fathercatOption func(*FatherCatMutation)

// newFatherCatMutation creates new mutation for the FatherCat entity.
func newFatherCatMutation(c config, op Op, opts ...fathercatOption) *FatherCatMutation {
	m := &FatherCatMutation{
		config:        c,
		op:            op,
		typ:           TypeFatherCat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFatherCatID sets the ID field of the mutation.
func withFatherCatID(id uuid.UUID) fathercatOption {
	return func(m *FatherCatMutation) {
		var (
			err   error
			once  sync.Once
			value *FatherCat
		)
		m.oldValue = func(ctx context.Context) (*FatherCat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FatherCat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFatherCat sets the old FatherCat of the mutation.
func withFatherCat(node *FatherCat) fathercatOption {
	return func(m *FatherCatMutation) {
		m.oldValue = func(context.Context) (*FatherCat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FatherCatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FatherCatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FatherCat entities.
func (m *FatherCatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FatherCatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FatherCatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FatherCat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedTime sets the "deleted_time" field.
func (m *FatherCatMutation) SetDeletedTime(t time.Time) {
	m.deleted_time = &t
}

// DeletedTime returns the value of the "deleted_time" field in the mutation.
func (m *FatherCatMutation) DeletedTime() (r time.Time, exists bool) {
	v := m.deleted_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedTime returns the old "deleted_time" field's value of the FatherCat entity.
// If the FatherCat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FatherCatMutation) OldDeletedTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedTime: %w", err)
	}
	return oldValue.DeletedTime, nil
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (m *FatherCatMutation) ClearDeletedTime() {
	m.deleted_time = nil
	m.clearedFields[fathercat.FieldDeletedTime] = struct{}{}
}

// DeletedTimeCleared returns if the "deleted_time" field was cleared in this mutation.
func (m *FatherCatMutation) DeletedTimeCleared() bool {
	_, ok := m.clearedFields[fathercat.FieldDeletedTime]
	return ok
}

// ResetDeletedTime resets all changes to the "deleted_time" field.
func (m *FatherCatMutation) ResetDeletedTime() {
	m.deleted_time = nil
	delete(m.clearedFields, fathercat.FieldDeletedTime)
}

// SetCreateTime sets the "create_time" field.
func (m *FatherCatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *FatherCatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the FatherCat entity.
// If the FatherCat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FatherCatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *FatherCatMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *FatherCatMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *FatherCatMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the FatherCat entity.
// If the FatherCat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FatherCatMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *FatherCatMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *FatherCatMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FatherCatMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FatherCat entity.
// If the FatherCat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FatherCatMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FatherCatMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the FatherCatMutation builder.
func (m *FatherCatMutation) Where(ps ...predicate.FatherCat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FatherCatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FatherCatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FatherCat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FatherCatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FatherCatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FatherCat).
func (m *FatherCatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FatherCatMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.deleted_time != nil {
		fields = append(fields, fathercat.FieldDeletedTime)
	}
	if m.create_time != nil {
		fields = append(fields, fathercat.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, fathercat.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, fathercat.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FatherCatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fathercat.FieldDeletedTime:
		return m.DeletedTime()
	case fathercat.FieldCreateTime:
		return m.CreateTime()
	case fathercat.FieldUpdateTime:
		return m.UpdateTime()
	case fathercat.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FatherCatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fathercat.FieldDeletedTime:
		return m.OldDeletedTime(ctx)
	case fathercat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case fathercat.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case fathercat.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown FatherCat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FatherCatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fathercat.FieldDeletedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedTime(v)
		return nil
	case fathercat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case fathercat.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case fathercat.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown FatherCat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FatherCatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FatherCatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FatherCatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FatherCat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FatherCatMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fathercat.FieldDeletedTime) {
		fields = append(fields, fathercat.FieldDeletedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FatherCatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FatherCatMutation) ClearField(name string) error {
	switch name {
	case fathercat.FieldDeletedTime:
		m.ClearDeletedTime()
		return nil
	}
	return fmt.Errorf("unknown FatherCat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FatherCatMutation) ResetField(name string) error {
	switch name {
	case fathercat.FieldDeletedTime:
		m.ResetDeletedTime()
		return nil
	case fathercat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case fathercat.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case fathercat.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown FatherCat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FatherCatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FatherCatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FatherCatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FatherCatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FatherCatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FatherCatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FatherCatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FatherCat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FatherCatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FatherCat edge %s", name)
}

// KittenMutation represents an operation that mutates the Kitten nodes in the graph.
type KittenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	deleted_time  *time.Time
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	mother        *uuid.UUID
	clearedmother bool
	done          bool
	oldValue      func(context.Context) (*Kitten, error)
	predicates    []predicate.Kitten
}

var _ ent.Mutation = (*KittenMutation)(nil)

// kittenOption allows management of the mutation configuration using functional options.
type kittenOption func(*KittenMutation)

// newKittenMutation creates new mutation for the Kitten entity.
func newKittenMutation(c config, op Op, opts ...kittenOption) *KittenMutation {
	m := &KittenMutation{
		config:        c,
		op:            op,
		typ:           TypeKitten,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKittenID sets the ID field of the mutation.
func withKittenID(id uuid.UUID) kittenOption {
	return func(m *KittenMutation) {
		var (
			err   error
			once  sync.Once
			value *Kitten
		)
		m.oldValue = func(ctx context.Context) (*Kitten, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Kitten.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKitten sets the old Kitten of the mutation.
func withKitten(node *Kitten) kittenOption {
	return func(m *KittenMutation) {
		m.oldValue = func(context.Context) (*Kitten, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KittenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KittenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Kitten entities.
func (m *KittenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KittenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KittenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Kitten.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedTime sets the "deleted_time" field.
func (m *KittenMutation) SetDeletedTime(t time.Time) {
	m.deleted_time = &t
}

// DeletedTime returns the value of the "deleted_time" field in the mutation.
func (m *KittenMutation) DeletedTime() (r time.Time, exists bool) {
	v := m.deleted_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedTime returns the old "deleted_time" field's value of the Kitten entity.
// If the Kitten object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KittenMutation) OldDeletedTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedTime: %w", err)
	}
	return oldValue.DeletedTime, nil
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (m *KittenMutation) ClearDeletedTime() {
	m.deleted_time = nil
	m.clearedFields[kitten.FieldDeletedTime] = struct{}{}
}

// DeletedTimeCleared returns if the "deleted_time" field was cleared in this mutation.
func (m *KittenMutation) DeletedTimeCleared() bool {
	_, ok := m.clearedFields[kitten.FieldDeletedTime]
	return ok
}

// ResetDeletedTime resets all changes to the "deleted_time" field.
func (m *KittenMutation) ResetDeletedTime() {
	m.deleted_time = nil
	delete(m.clearedFields, kitten.FieldDeletedTime)
}

// SetCreateTime sets the "create_time" field.
func (m *KittenMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *KittenMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Kitten entity.
// If the Kitten object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KittenMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *KittenMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *KittenMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *KittenMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Kitten entity.
// If the Kitten object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KittenMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *KittenMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *KittenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *KittenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Kitten entity.
// If the Kitten object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KittenMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *KittenMutation) ResetName() {
	m.name = nil
}

// SetMotherID sets the "mother_id" field.
func (m *KittenMutation) SetMotherID(u uuid.UUID) {
	m.mother = &u
}

// MotherID returns the value of the "mother_id" field in the mutation.
func (m *KittenMutation) MotherID() (r uuid.UUID, exists bool) {
	v := m.mother
	if v == nil {
		return
	}
	return *v, true
}

// OldMotherID returns the old "mother_id" field's value of the Kitten entity.
// If the Kitten object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KittenMutation) OldMotherID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMotherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMotherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMotherID: %w", err)
	}
	return oldValue.MotherID, nil
}

// ResetMotherID resets all changes to the "mother_id" field.
func (m *KittenMutation) ResetMotherID() {
	m.mother = nil
}

// ClearMother clears the "mother" edge to the Cat entity.
func (m *KittenMutation) ClearMother() {
	m.clearedmother = true
	m.clearedFields[kitten.FieldMotherID] = struct{}{}
}

// MotherCleared reports if the "mother" edge to the Cat entity was cleared.
func (m *KittenMutation) MotherCleared() bool {
	return m.clearedmother
}

// MotherIDs returns the "mother" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MotherID instead. It exists only for internal usage by the builders.
func (m *KittenMutation) MotherIDs() (ids []uuid.UUID) {
	if id := m.mother; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMother resets all changes to the "mother" edge.
func (m *KittenMutation) ResetMother() {
	m.mother = nil
	m.clearedmother = false
}

// Where appends a list predicates to the KittenMutation builder.
func (m *KittenMutation) Where(ps ...predicate.Kitten) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KittenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KittenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Kitten, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KittenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KittenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Kitten).
func (m *KittenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KittenMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.deleted_time != nil {
		fields = append(fields, kitten.FieldDeletedTime)
	}
	if m.create_time != nil {
		fields = append(fields, kitten.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, kitten.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, kitten.FieldName)
	}
	if m.mother != nil {
		fields = append(fields, kitten.FieldMotherID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KittenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case kitten.FieldDeletedTime:
		return m.DeletedTime()
	case kitten.FieldCreateTime:
		return m.CreateTime()
	case kitten.FieldUpdateTime:
		return m.UpdateTime()
	case kitten.FieldName:
		return m.Name()
	case kitten.FieldMotherID:
		return m.MotherID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KittenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case kitten.FieldDeletedTime:
		return m.OldDeletedTime(ctx)
	case kitten.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case kitten.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case kitten.FieldName:
		return m.OldName(ctx)
	case kitten.FieldMotherID:
		return m.OldMotherID(ctx)
	}
	return nil, fmt.Errorf("unknown Kitten field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KittenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case kitten.FieldDeletedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedTime(v)
		return nil
	case kitten.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case kitten.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case kitten.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case kitten.FieldMotherID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMotherID(v)
		return nil
	}
	return fmt.Errorf("unknown Kitten field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KittenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KittenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KittenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Kitten numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KittenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(kitten.FieldDeletedTime) {
		fields = append(fields, kitten.FieldDeletedTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KittenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KittenMutation) ClearField(name string) error {
	switch name {
	case kitten.FieldDeletedTime:
		m.ClearDeletedTime()
		return nil
	}
	return fmt.Errorf("unknown Kitten nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KittenMutation) ResetField(name string) error {
	switch name {
	case kitten.FieldDeletedTime:
		m.ResetDeletedTime()
		return nil
	case kitten.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case kitten.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case kitten.FieldName:
		m.ResetName()
		return nil
	case kitten.FieldMotherID:
		m.ResetMotherID()
		return nil
	}
	return fmt.Errorf("unknown Kitten field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KittenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mother != nil {
		edges = append(edges, kitten.EdgeMother)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KittenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case kitten.EdgeMother:
		if id := m.mother; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KittenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KittenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KittenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmother {
		edges = append(edges, kitten.EdgeMother)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KittenMutation) EdgeCleared(name string) bool {
	switch name {
	case kitten.EdgeMother:
		return m.clearedmother
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KittenMutation) ClearEdge(name string) error {
	switch name {
	case kitten.EdgeMother:
		m.ClearMother()
		return nil
	}
	return fmt.Errorf("unknown Kitten unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KittenMutation) ResetEdge(name string) error {
	switch name {
	case kitten.EdgeMother:
		m.ResetMother()
		return nil
	}
	return fmt.Errorf("unknown Kitten edge %s", name)
}
