// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/breed"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/cat"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/kitten"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/predicate"
)

// CatUpdate is the builder for updating Cat entities.
type CatUpdate struct {
	config
	hooks    []Hook
	mutation *CatMutation
}

// Where appends a list predicates to the CatUpdate builder.
func (cu *CatUpdate) Where(ps ...predicate.Cat) *CatUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDeletedTime sets the "deleted_time" field.
func (cu *CatUpdate) SetDeletedTime(t time.Time) *CatUpdate {
	cu.mutation.SetDeletedTime(t)
	return cu
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (cu *CatUpdate) SetNillableDeletedTime(t *time.Time) *CatUpdate {
	if t != nil {
		cu.SetDeletedTime(*t)
	}
	return cu
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (cu *CatUpdate) ClearDeletedTime() *CatUpdate {
	cu.mutation.ClearDeletedTime()
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CatUpdate) SetUpdateTime(t time.Time) *CatUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CatUpdate) SetName(s string) *CatUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CatUpdate) SetNillableName(s *string) *CatUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetBreedID sets the "breed_id" field.
func (cu *CatUpdate) SetBreedID(u uuid.UUID) *CatUpdate {
	cu.mutation.SetBreedID(u)
	return cu
}

// SetNillableBreedID sets the "breed_id" field if the given value is not nil.
func (cu *CatUpdate) SetNillableBreedID(u *uuid.UUID) *CatUpdate {
	if u != nil {
		cu.SetBreedID(*u)
	}
	return cu
}

// SetSpeed sets the "speed" field.
func (cu *CatUpdate) SetSpeed(i int64) *CatUpdate {
	cu.mutation.ResetSpeed()
	cu.mutation.SetSpeed(i)
	return cu
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (cu *CatUpdate) SetNillableSpeed(i *int64) *CatUpdate {
	if i != nil {
		cu.SetSpeed(*i)
	}
	return cu
}

// AddSpeed adds i to the "speed" field.
func (cu *CatUpdate) AddSpeed(i int64) *CatUpdate {
	cu.mutation.AddSpeed(i)
	return cu
}

// SetDateFrom sets the "date_from" field.
func (cu *CatUpdate) SetDateFrom(t time.Time) *CatUpdate {
	cu.mutation.SetDateFrom(t)
	return cu
}

// SetNillableDateFrom sets the "date_from" field if the given value is not nil.
func (cu *CatUpdate) SetNillableDateFrom(t *time.Time) *CatUpdate {
	if t != nil {
		cu.SetDateFrom(*t)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CatUpdate) SetType(c cat.Type) *CatUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CatUpdate) SetNillableType(c *cat.Type) *CatUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetOtherType sets the "other_type" field.
func (cu *CatUpdate) SetOtherType(ct cat.OtherType) *CatUpdate {
	cu.mutation.SetOtherType(ct)
	return cu
}

// SetNillableOtherType sets the "other_type" field if the given value is not nil.
func (cu *CatUpdate) SetNillableOtherType(ct *cat.OtherType) *CatUpdate {
	if ct != nil {
		cu.SetOtherType(*ct)
	}
	return cu
}

// AddKittenIDs adds the "kittens" edge to the Kitten entity by IDs.
func (cu *CatUpdate) AddKittenIDs(ids ...uuid.UUID) *CatUpdate {
	cu.mutation.AddKittenIDs(ids...)
	return cu
}

// AddKittens adds the "kittens" edges to the Kitten entity.
func (cu *CatUpdate) AddKittens(k ...*Kitten) *CatUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.AddKittenIDs(ids...)
}

// SetBreed sets the "breed" edge to the Breed entity.
func (cu *CatUpdate) SetBreed(b *Breed) *CatUpdate {
	return cu.SetBreedID(b.ID)
}

// Mutation returns the CatMutation object of the builder.
func (cu *CatUpdate) Mutation() *CatMutation {
	return cu.mutation
}

// ClearKittens clears all "kittens" edges to the Kitten entity.
func (cu *CatUpdate) ClearKittens() *CatUpdate {
	cu.mutation.ClearKittens()
	return cu
}

// RemoveKittenIDs removes the "kittens" edge to Kitten entities by IDs.
func (cu *CatUpdate) RemoveKittenIDs(ids ...uuid.UUID) *CatUpdate {
	cu.mutation.RemoveKittenIDs(ids...)
	return cu
}

// RemoveKittens removes "kittens" edges to Kitten entities.
func (cu *CatUpdate) RemoveKittens(k ...*Kitten) *CatUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.RemoveKittenIDs(ids...)
}

// ClearBreed clears the "breed" edge to the Breed entity.
func (cu *CatUpdate) ClearBreed() *CatUpdate {
	cu.mutation.ClearBreed()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CatUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CatUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CatUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CatUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CatUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := cat.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CatUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := cat.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`gen: validator failed for field "Cat.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.OtherType(); ok {
		if err := cat.OtherTypeValidator(v); err != nil {
			return &ValidationError{Name: "other_type", err: fmt.Errorf(`gen: validator failed for field "Cat.other_type": %w`, err)}
		}
	}
	if _, ok := cu.mutation.BreedID(); cu.mutation.BreedCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Cat.breed"`)
	}
	return nil
}

func (cu *CatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cat.Table, cat.Columns, sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.DeletedTime(); ok {
		_spec.SetField(cat.FieldDeletedTime, field.TypeTime, value)
	}
	if cu.mutation.DeletedTimeCleared() {
		_spec.ClearField(cat.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(cat.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cat.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Speed(); ok {
		_spec.SetField(cat.FieldSpeed, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedSpeed(); ok {
		_spec.AddField(cat.FieldSpeed, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.DateFrom(); ok {
		_spec.SetField(cat.FieldDateFrom, field.TypeTime, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(cat.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.OtherType(); ok {
		_spec.SetField(cat.FieldOtherType, field.TypeEnum, value)
	}
	if cu.mutation.KittensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedKittensIDs(); len(nodes) > 0 && !cu.mutation.KittensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.KittensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BreedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.BreedTable,
			Columns: []string{cat.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(breed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BreedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.BreedTable,
			Columns: []string{cat.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(breed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CatUpdateOne is the builder for updating a single Cat entity.
type CatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CatMutation
}

// SetDeletedTime sets the "deleted_time" field.
func (cuo *CatUpdateOne) SetDeletedTime(t time.Time) *CatUpdateOne {
	cuo.mutation.SetDeletedTime(t)
	return cuo
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableDeletedTime(t *time.Time) *CatUpdateOne {
	if t != nil {
		cuo.SetDeletedTime(*t)
	}
	return cuo
}

// ClearDeletedTime clears the value of the "deleted_time" field.
func (cuo *CatUpdateOne) ClearDeletedTime() *CatUpdateOne {
	cuo.mutation.ClearDeletedTime()
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CatUpdateOne) SetUpdateTime(t time.Time) *CatUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CatUpdateOne) SetName(s string) *CatUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableName(s *string) *CatUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetBreedID sets the "breed_id" field.
func (cuo *CatUpdateOne) SetBreedID(u uuid.UUID) *CatUpdateOne {
	cuo.mutation.SetBreedID(u)
	return cuo
}

// SetNillableBreedID sets the "breed_id" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableBreedID(u *uuid.UUID) *CatUpdateOne {
	if u != nil {
		cuo.SetBreedID(*u)
	}
	return cuo
}

// SetSpeed sets the "speed" field.
func (cuo *CatUpdateOne) SetSpeed(i int64) *CatUpdateOne {
	cuo.mutation.ResetSpeed()
	cuo.mutation.SetSpeed(i)
	return cuo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableSpeed(i *int64) *CatUpdateOne {
	if i != nil {
		cuo.SetSpeed(*i)
	}
	return cuo
}

// AddSpeed adds i to the "speed" field.
func (cuo *CatUpdateOne) AddSpeed(i int64) *CatUpdateOne {
	cuo.mutation.AddSpeed(i)
	return cuo
}

// SetDateFrom sets the "date_from" field.
func (cuo *CatUpdateOne) SetDateFrom(t time.Time) *CatUpdateOne {
	cuo.mutation.SetDateFrom(t)
	return cuo
}

// SetNillableDateFrom sets the "date_from" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableDateFrom(t *time.Time) *CatUpdateOne {
	if t != nil {
		cuo.SetDateFrom(*t)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CatUpdateOne) SetType(c cat.Type) *CatUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableType(c *cat.Type) *CatUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetOtherType sets the "other_type" field.
func (cuo *CatUpdateOne) SetOtherType(ct cat.OtherType) *CatUpdateOne {
	cuo.mutation.SetOtherType(ct)
	return cuo
}

// SetNillableOtherType sets the "other_type" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableOtherType(ct *cat.OtherType) *CatUpdateOne {
	if ct != nil {
		cuo.SetOtherType(*ct)
	}
	return cuo
}

// AddKittenIDs adds the "kittens" edge to the Kitten entity by IDs.
func (cuo *CatUpdateOne) AddKittenIDs(ids ...uuid.UUID) *CatUpdateOne {
	cuo.mutation.AddKittenIDs(ids...)
	return cuo
}

// AddKittens adds the "kittens" edges to the Kitten entity.
func (cuo *CatUpdateOne) AddKittens(k ...*Kitten) *CatUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.AddKittenIDs(ids...)
}

// SetBreed sets the "breed" edge to the Breed entity.
func (cuo *CatUpdateOne) SetBreed(b *Breed) *CatUpdateOne {
	return cuo.SetBreedID(b.ID)
}

// Mutation returns the CatMutation object of the builder.
func (cuo *CatUpdateOne) Mutation() *CatMutation {
	return cuo.mutation
}

// ClearKittens clears all "kittens" edges to the Kitten entity.
func (cuo *CatUpdateOne) ClearKittens() *CatUpdateOne {
	cuo.mutation.ClearKittens()
	return cuo
}

// RemoveKittenIDs removes the "kittens" edge to Kitten entities by IDs.
func (cuo *CatUpdateOne) RemoveKittenIDs(ids ...uuid.UUID) *CatUpdateOne {
	cuo.mutation.RemoveKittenIDs(ids...)
	return cuo
}

// RemoveKittens removes "kittens" edges to Kitten entities.
func (cuo *CatUpdateOne) RemoveKittens(k ...*Kitten) *CatUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.RemoveKittenIDs(ids...)
}

// ClearBreed clears the "breed" edge to the Breed entity.
func (cuo *CatUpdateOne) ClearBreed() *CatUpdateOne {
	cuo.mutation.ClearBreed()
	return cuo
}

// Where appends a list predicates to the CatUpdate builder.
func (cuo *CatUpdateOne) Where(ps ...predicate.Cat) *CatUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CatUpdateOne) Select(field string, fields ...string) *CatUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cat entity.
func (cuo *CatUpdateOne) Save(ctx context.Context) (*Cat, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CatUpdateOne) SaveX(ctx context.Context) *Cat {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CatUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CatUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CatUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := cat.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CatUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := cat.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`gen: validator failed for field "Cat.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.OtherType(); ok {
		if err := cat.OtherTypeValidator(v); err != nil {
			return &ValidationError{Name: "other_type", err: fmt.Errorf(`gen: validator failed for field "Cat.other_type": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.BreedID(); cuo.mutation.BreedCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "Cat.breed"`)
	}
	return nil
}

func (cuo *CatUpdateOne) sqlSave(ctx context.Context) (_node *Cat, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cat.Table, cat.Columns, sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Cat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cat.FieldID)
		for _, f := range fields {
			if !cat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != cat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.DeletedTime(); ok {
		_spec.SetField(cat.FieldDeletedTime, field.TypeTime, value)
	}
	if cuo.mutation.DeletedTimeCleared() {
		_spec.ClearField(cat.FieldDeletedTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(cat.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cat.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Speed(); ok {
		_spec.SetField(cat.FieldSpeed, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedSpeed(); ok {
		_spec.AddField(cat.FieldSpeed, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.DateFrom(); ok {
		_spec.SetField(cat.FieldDateFrom, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(cat.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.OtherType(); ok {
		_spec.SetField(cat.FieldOtherType, field.TypeEnum, value)
	}
	if cuo.mutation.KittensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedKittensIDs(); len(nodes) > 0 && !cuo.mutation.KittensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.KittensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.KittensTable,
			Columns: []string{cat.KittensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kitten.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BreedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.BreedTable,
			Columns: []string{cat.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(breed.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BreedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.BreedTable,
			Columns: []string{cat.BreedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(breed.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cat{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
