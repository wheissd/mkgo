// Code generated by ent, DO NOT EDIT.

package kitten

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the kitten type in the database.
	Label = "kitten"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedTime holds the string denoting the deleted_time field in the database.
	FieldDeletedTime = "deleted_time"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMotherID holds the string denoting the mother_id field in the database.
	FieldMotherID = "mother_id"
	// EdgeMother holds the string denoting the mother edge name in mutations.
	EdgeMother = "mother"
	// Table holds the table name of the kitten in the database.
	Table = "kittens"
	// MotherTable is the table that holds the mother relation/edge.
	MotherTable = "kittens"
	// MotherInverseTable is the table name for the Cat entity.
	// It exists in this package in order to avoid circular dependency with the "cat" package.
	MotherInverseTable = "cats"
	// MotherColumn is the table column denoting the mother relation/edge.
	MotherColumn = "mother_id"
)

// Columns holds all SQL columns for kitten fields.
var Columns = []string{
	FieldID,
	FieldDeletedTime,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldMotherID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Kitten queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedTime orders the results by the deleted_time field.
func ByDeletedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedTime, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMotherID orders the results by the mother_id field.
func ByMotherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMotherID, opts...).ToFunc()
}

// ByMotherField orders the results by mother field.
func ByMotherField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMotherStep(), sql.OrderByField(field, opts...))
	}
}
func newMotherStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MotherInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MotherTable, MotherColumn),
	)
}
