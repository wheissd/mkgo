// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/fathercat"
)

// FatherCatCreate is the builder for creating a FatherCat entity.
type FatherCatCreate struct {
	config
	mutation *FatherCatMutation
	hooks    []Hook
}

// SetDeletedTime sets the "deleted_time" field.
func (fcc *FatherCatCreate) SetDeletedTime(t time.Time) *FatherCatCreate {
	fcc.mutation.SetDeletedTime(t)
	return fcc
}

// SetNillableDeletedTime sets the "deleted_time" field if the given value is not nil.
func (fcc *FatherCatCreate) SetNillableDeletedTime(t *time.Time) *FatherCatCreate {
	if t != nil {
		fcc.SetDeletedTime(*t)
	}
	return fcc
}

// SetCreateTime sets the "create_time" field.
func (fcc *FatherCatCreate) SetCreateTime(t time.Time) *FatherCatCreate {
	fcc.mutation.SetCreateTime(t)
	return fcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fcc *FatherCatCreate) SetNillableCreateTime(t *time.Time) *FatherCatCreate {
	if t != nil {
		fcc.SetCreateTime(*t)
	}
	return fcc
}

// SetUpdateTime sets the "update_time" field.
func (fcc *FatherCatCreate) SetUpdateTime(t time.Time) *FatherCatCreate {
	fcc.mutation.SetUpdateTime(t)
	return fcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fcc *FatherCatCreate) SetNillableUpdateTime(t *time.Time) *FatherCatCreate {
	if t != nil {
		fcc.SetUpdateTime(*t)
	}
	return fcc
}

// SetName sets the "name" field.
func (fcc *FatherCatCreate) SetName(s string) *FatherCatCreate {
	fcc.mutation.SetName(s)
	return fcc
}

// SetID sets the "id" field.
func (fcc *FatherCatCreate) SetID(u uuid.UUID) *FatherCatCreate {
	fcc.mutation.SetID(u)
	return fcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fcc *FatherCatCreate) SetNillableID(u *uuid.UUID) *FatherCatCreate {
	if u != nil {
		fcc.SetID(*u)
	}
	return fcc
}

// Mutation returns the FatherCatMutation object of the builder.
func (fcc *FatherCatCreate) Mutation() *FatherCatMutation {
	return fcc.mutation
}

// Save creates the FatherCat in the database.
func (fcc *FatherCatCreate) Save(ctx context.Context) (*FatherCat, error) {
	fcc.defaults()
	return withHooks(ctx, fcc.sqlSave, fcc.mutation, fcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fcc *FatherCatCreate) SaveX(ctx context.Context) *FatherCat {
	v, err := fcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcc *FatherCatCreate) Exec(ctx context.Context) error {
	_, err := fcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcc *FatherCatCreate) ExecX(ctx context.Context) {
	if err := fcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fcc *FatherCatCreate) defaults() {
	if _, ok := fcc.mutation.CreateTime(); !ok {
		v := fathercat.DefaultCreateTime()
		fcc.mutation.SetCreateTime(v)
	}
	if _, ok := fcc.mutation.UpdateTime(); !ok {
		v := fathercat.DefaultUpdateTime()
		fcc.mutation.SetUpdateTime(v)
	}
	if _, ok := fcc.mutation.ID(); !ok {
		v := fathercat.DefaultID()
		fcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcc *FatherCatCreate) check() error {
	if _, ok := fcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`gen: missing required field "FatherCat.create_time"`)}
	}
	if _, ok := fcc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`gen: missing required field "FatherCat.update_time"`)}
	}
	if _, ok := fcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "FatherCat.name"`)}
	}
	return nil
}

func (fcc *FatherCatCreate) sqlSave(ctx context.Context) (*FatherCat, error) {
	if err := fcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fcc.mutation.id = &_node.ID
	fcc.mutation.done = true
	return _node, nil
}

func (fcc *FatherCatCreate) createSpec() (*FatherCat, *sqlgraph.CreateSpec) {
	var (
		_node = &FatherCat{config: fcc.config}
		_spec = sqlgraph.NewCreateSpec(fathercat.Table, sqlgraph.NewFieldSpec(fathercat.FieldID, field.TypeUUID))
	)
	if id, ok := fcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fcc.mutation.DeletedTime(); ok {
		_spec.SetField(fathercat.FieldDeletedTime, field.TypeTime, value)
		_node.DeletedTime = &value
	}
	if value, ok := fcc.mutation.CreateTime(); ok {
		_spec.SetField(fathercat.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := fcc.mutation.UpdateTime(); ok {
		_spec.SetField(fathercat.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := fcc.mutation.Name(); ok {
		_spec.SetField(fathercat.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// FatherCatCreateBulk is the builder for creating many FatherCat entities in bulk.
type FatherCatCreateBulk struct {
	config
	err      error
	builders []*FatherCatCreate
}

// Save creates the FatherCat entities in the database.
func (fccb *FatherCatCreateBulk) Save(ctx context.Context) ([]*FatherCat, error) {
	if fccb.err != nil {
		return nil, fccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fccb.builders))
	nodes := make([]*FatherCat, len(fccb.builders))
	mutators := make([]Mutator, len(fccb.builders))
	for i := range fccb.builders {
		func(i int, root context.Context) {
			builder := fccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FatherCatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fccb *FatherCatCreateBulk) SaveX(ctx context.Context) []*FatherCat {
	v, err := fccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fccb *FatherCatCreateBulk) Exec(ctx context.Context) error {
	_, err := fccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fccb *FatherCatCreateBulk) ExecX(ctx context.Context) {
	if err := fccb.Exec(ctx); err != nil {
		panic(err)
	}
}
