// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/cat"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/kitten"
)

// Kitten is the model entity for the Kitten schema.
type Kitten struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeletedTime holds the value of the "deleted_time" field.
	DeletedTime *time.Time `json:"deleted_time,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MotherID holds the value of the "mother_id" field.
	MotherID uuid.UUID `json:"mother_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KittenQuery when eager-loading is set.
	Edges        KittenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KittenEdges holds the relations/edges for other nodes in the graph.
type KittenEdges struct {
	// Mother holds the value of the mother edge.
	Mother *Cat `json:"mother,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MotherOrErr returns the Mother value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KittenEdges) MotherOrErr() (*Cat, error) {
	if e.loadedTypes[0] {
		if e.Mother == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cat.Label}
		}
		return e.Mother, nil
	}
	return nil, &NotLoadedError{edge: "mother"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kitten) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kitten.FieldName:
			values[i] = new(sql.NullString)
		case kitten.FieldDeletedTime, kitten.FieldCreateTime, kitten.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case kitten.FieldID, kitten.FieldMotherID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kitten fields.
func (k *Kitten) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kitten.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				k.ID = *value
			}
		case kitten.FieldDeletedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_time", values[i])
			} else if value.Valid {
				k.DeletedTime = new(time.Time)
				*k.DeletedTime = value.Time
			}
		case kitten.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				k.CreateTime = value.Time
			}
		case kitten.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				k.UpdateTime = value.Time
			}
		case kitten.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				k.Name = value.String
			}
		case kitten.FieldMotherID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field mother_id", values[i])
			} else if value != nil {
				k.MotherID = *value
			}
		default:
			k.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Kitten.
// This includes values selected through modifiers, order, etc.
func (k *Kitten) Value(name string) (ent.Value, error) {
	return k.selectValues.Get(name)
}

// QueryMother queries the "mother" edge of the Kitten entity.
func (k *Kitten) QueryMother() *CatQuery {
	return NewKittenClient(k.config).QueryMother(k)
}

// Update returns a builder for updating this Kitten.
// Note that you need to call Kitten.Unwrap() before calling this method if this Kitten
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kitten) Update() *KittenUpdateOne {
	return NewKittenClient(k.config).UpdateOne(k)
}

// Unwrap unwraps the Kitten entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Kitten) Unwrap() *Kitten {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("gen: Kitten is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kitten) String() string {
	var builder strings.Builder
	builder.WriteString("Kitten(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	if v := k.DeletedTime; v != nil {
		builder.WriteString("deleted_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(k.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(k.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(k.Name)
	builder.WriteString(", ")
	builder.WriteString("mother_id=")
	builder.WriteString(fmt.Sprintf("%v", k.MotherID))
	builder.WriteByte(')')
	return builder.String()
}

// Kittens is a parsable slice of Kitten.
type Kittens []*Kitten
