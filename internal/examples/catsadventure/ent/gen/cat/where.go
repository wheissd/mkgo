// Code generated by ent, DO NOT EDIT.

package cat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/wheissd/mkgo/internal/examples/catsadventure/ent/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldID, id))
}

// DeletedTime applies equality check predicate on the "deleted_time" field. It's identical to DeletedTimeEQ.
func DeletedTime(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldDeletedTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldName, v))
}

// BreedID applies equality check predicate on the "breed_id" field. It's identical to BreedIDEQ.
func BreedID(v uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldBreedID, v))
}

// Speed applies equality check predicate on the "speed" field. It's identical to SpeedEQ.
func Speed(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldSpeed, v))
}

// DateFrom applies equality check predicate on the "date_from" field. It's identical to DateFromEQ.
func DateFrom(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldDateFrom, v))
}

// DeletedTimeEQ applies the EQ predicate on the "deleted_time" field.
func DeletedTimeEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldDeletedTime, v))
}

// DeletedTimeNEQ applies the NEQ predicate on the "deleted_time" field.
func DeletedTimeNEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldDeletedTime, v))
}

// DeletedTimeIn applies the In predicate on the "deleted_time" field.
func DeletedTimeIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldDeletedTime, vs...))
}

// DeletedTimeNotIn applies the NotIn predicate on the "deleted_time" field.
func DeletedTimeNotIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldDeletedTime, vs...))
}

// DeletedTimeGT applies the GT predicate on the "deleted_time" field.
func DeletedTimeGT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldDeletedTime, v))
}

// DeletedTimeGTE applies the GTE predicate on the "deleted_time" field.
func DeletedTimeGTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldDeletedTime, v))
}

// DeletedTimeLT applies the LT predicate on the "deleted_time" field.
func DeletedTimeLT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldDeletedTime, v))
}

// DeletedTimeLTE applies the LTE predicate on the "deleted_time" field.
func DeletedTimeLTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldDeletedTime, v))
}

// DeletedTimeIsNil applies the IsNil predicate on the "deleted_time" field.
func DeletedTimeIsNil() predicate.Cat {
	return predicate.Cat(sql.FieldIsNull(FieldDeletedTime))
}

// DeletedTimeNotNil applies the NotNil predicate on the "deleted_time" field.
func DeletedTimeNotNil() predicate.Cat {
	return predicate.Cat(sql.FieldNotNull(FieldDeletedTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Cat {
	return predicate.Cat(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Cat {
	return predicate.Cat(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Cat {
	return predicate.Cat(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Cat {
	return predicate.Cat(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Cat {
	return predicate.Cat(sql.FieldContainsFold(FieldName, v))
}

// BreedIDEQ applies the EQ predicate on the "breed_id" field.
func BreedIDEQ(v uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldBreedID, v))
}

// BreedIDNEQ applies the NEQ predicate on the "breed_id" field.
func BreedIDNEQ(v uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldBreedID, v))
}

// BreedIDIn applies the In predicate on the "breed_id" field.
func BreedIDIn(vs ...uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldBreedID, vs...))
}

// BreedIDNotIn applies the NotIn predicate on the "breed_id" field.
func BreedIDNotIn(vs ...uuid.UUID) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldBreedID, vs...))
}

// SpeedEQ applies the EQ predicate on the "speed" field.
func SpeedEQ(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldSpeed, v))
}

// SpeedNEQ applies the NEQ predicate on the "speed" field.
func SpeedNEQ(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldSpeed, v))
}

// SpeedIn applies the In predicate on the "speed" field.
func SpeedIn(vs ...int64) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldSpeed, vs...))
}

// SpeedNotIn applies the NotIn predicate on the "speed" field.
func SpeedNotIn(vs ...int64) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldSpeed, vs...))
}

// SpeedGT applies the GT predicate on the "speed" field.
func SpeedGT(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldSpeed, v))
}

// SpeedGTE applies the GTE predicate on the "speed" field.
func SpeedGTE(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldSpeed, v))
}

// SpeedLT applies the LT predicate on the "speed" field.
func SpeedLT(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldSpeed, v))
}

// SpeedLTE applies the LTE predicate on the "speed" field.
func SpeedLTE(v int64) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldSpeed, v))
}

// DateFromEQ applies the EQ predicate on the "date_from" field.
func DateFromEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldDateFrom, v))
}

// DateFromNEQ applies the NEQ predicate on the "date_from" field.
func DateFromNEQ(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldDateFrom, v))
}

// DateFromIn applies the In predicate on the "date_from" field.
func DateFromIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldDateFrom, vs...))
}

// DateFromNotIn applies the NotIn predicate on the "date_from" field.
func DateFromNotIn(vs ...time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldDateFrom, vs...))
}

// DateFromGT applies the GT predicate on the "date_from" field.
func DateFromGT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGT(FieldDateFrom, v))
}

// DateFromGTE applies the GTE predicate on the "date_from" field.
func DateFromGTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldGTE(FieldDateFrom, v))
}

// DateFromLT applies the LT predicate on the "date_from" field.
func DateFromLT(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLT(FieldDateFrom, v))
}

// DateFromLTE applies the LTE predicate on the "date_from" field.
func DateFromLTE(v time.Time) predicate.Cat {
	return predicate.Cat(sql.FieldLTE(FieldDateFrom, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldType, vs...))
}

// OtherTypeEQ applies the EQ predicate on the "other_type" field.
func OtherTypeEQ(v OtherType) predicate.Cat {
	return predicate.Cat(sql.FieldEQ(FieldOtherType, v))
}

// OtherTypeNEQ applies the NEQ predicate on the "other_type" field.
func OtherTypeNEQ(v OtherType) predicate.Cat {
	return predicate.Cat(sql.FieldNEQ(FieldOtherType, v))
}

// OtherTypeIn applies the In predicate on the "other_type" field.
func OtherTypeIn(vs ...OtherType) predicate.Cat {
	return predicate.Cat(sql.FieldIn(FieldOtherType, vs...))
}

// OtherTypeNotIn applies the NotIn predicate on the "other_type" field.
func OtherTypeNotIn(vs ...OtherType) predicate.Cat {
	return predicate.Cat(sql.FieldNotIn(FieldOtherType, vs...))
}

// HasKittens applies the HasEdge predicate on the "kittens" edge.
func HasKittens() predicate.Cat {
	return predicate.Cat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, KittensTable, KittensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKittensWith applies the HasEdge predicate on the "kittens" edge with a given conditions (other predicates).
func HasKittensWith(preds ...predicate.Kitten) predicate.Cat {
	return predicate.Cat(func(s *sql.Selector) {
		step := newKittensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBreed applies the HasEdge predicate on the "breed" edge.
func HasBreed() predicate.Cat {
	return predicate.Cat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BreedTable, BreedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBreedWith applies the HasEdge predicate on the "breed" edge with a given conditions (other predicates).
func HasBreedWith(preds ...predicate.Breed) predicate.Cat {
	return predicate.Cat(func(s *sql.Selector) {
		step := newBreedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cat) predicate.Cat {
	return predicate.Cat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cat) predicate.Cat {
	return predicate.Cat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cat) predicate.Cat {
	return predicate.Cat(sql.NotPredicates(p))
}
