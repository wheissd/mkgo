// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BreedsColumns holds the columns for the "breeds" table.
	BreedsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_time", Type: field.TypeTime, Nullable: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// BreedsTable holds the schema information for the "breeds" table.
	BreedsTable = &schema.Table{
		Name:       "breeds",
		Columns:    BreedsColumns,
		PrimaryKey: []*schema.Column{BreedsColumns[0]},
	}
	// CatsColumns holds the columns for the "cats" table.
	CatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_time", Type: field.TypeTime, Nullable: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "speed", Type: field.TypeInt64},
		{Name: "date_from", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"merch", "hotel", "tournament"}},
		{Name: "other_type", Type: field.TypeEnum, Enums: []string{"merch", "hotel", "tournament"}},
		{Name: "breed_id", Type: field.TypeUUID},
	}
	// CatsTable holds the schema information for the "cats" table.
	CatsTable = &schema.Table{
		Name:       "cats",
		Columns:    CatsColumns,
		PrimaryKey: []*schema.Column{CatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cats_breeds_cats",
				Columns:    []*schema.Column{CatsColumns[9]},
				RefColumns: []*schema.Column{BreedsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FatherCatsColumns holds the columns for the "father_cats" table.
	FatherCatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_time", Type: field.TypeTime, Nullable: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// FatherCatsTable holds the schema information for the "father_cats" table.
	FatherCatsTable = &schema.Table{
		Name:       "father_cats",
		Columns:    FatherCatsColumns,
		PrimaryKey: []*schema.Column{FatherCatsColumns[0]},
	}
	// KittensColumns holds the columns for the "kittens" table.
	KittensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "deleted_time", Type: field.TypeTime, Nullable: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "mother_id", Type: field.TypeUUID},
	}
	// KittensTable holds the schema information for the "kittens" table.
	KittensTable = &schema.Table{
		Name:       "kittens",
		Columns:    KittensColumns,
		PrimaryKey: []*schema.Column{KittensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "kittens_cats_kittens",
				Columns:    []*schema.Column{KittensColumns[5]},
				RefColumns: []*schema.Column{CatsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BreedsTable,
		CatsTable,
		FatherCatsTable,
		KittensTable,
	}
)

func init() {
	CatsTable.ForeignKeys[0].RefTable = BreedsTable
	KittensTable.ForeignKeys[0].RefTable = CatsTable
}
