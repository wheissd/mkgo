// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateBreed implements createBreed operation.
	//
	// Create a new Breed  and persists it to storage.
	//
	// POST /breed
	CreateBreed(ctx context.Context, req *CreateBreed) (CreateBreedRes, error)
	// CreateCat implements createCat operation.
	//
	// Create a new Cat  and persists it to storage.
	//
	// POST /cat
	CreateCat(ctx context.Context, req *CreateCat) (CreateCatRes, error)
	// CreateFatherCat implements createFatherCat operation.
	//
	// Create a new FatherCat  and persists it to storage.
	//
	// POST /fathercat
	CreateFatherCat(ctx context.Context, req *CreateFatherCat) (CreateFatherCatRes, error)
	// CreateKitten implements createKitten operation.
	//
	// Create a new Kitten  and persists it to storage.
	//
	// POST /kitten
	CreateKitten(ctx context.Context, req *CreateKitten) (CreateKittenRes, error)
	// DeleteBreed implements deleteBreed operation.
	//
	// Delete Breed.
	//
	// DELETE /breed/{id}
	DeleteBreed(ctx context.Context, params DeleteBreedParams) (DeleteBreedRes, error)
	// DeleteCat implements deleteCat operation.
	//
	// Delete Cat.
	//
	// DELETE /cat/{id}
	DeleteCat(ctx context.Context, params DeleteCatParams) (DeleteCatRes, error)
	// DeleteFatherCat implements deleteFatherCat operation.
	//
	// Delete FatherCat.
	//
	// DELETE /fathercat/{id}
	DeleteFatherCat(ctx context.Context, params DeleteFatherCatParams) (DeleteFatherCatRes, error)
	// DeleteKitten implements deleteKitten operation.
	//
	// Delete Kitten.
	//
	// DELETE /kitten/{id}
	DeleteKitten(ctx context.Context, params DeleteKittenParams) (DeleteKittenRes, error)
	// ListBreed implements listBreed operation.
	//
	// List for Breeds.
	//
	// GET /breed
	ListBreed(ctx context.Context, params ListBreedParams) (ListBreedRes, error)
	// ListCat implements listCat operation.
	//
	// List for Cats.
	//
	// GET /cat
	ListCat(ctx context.Context, params ListCatParams) (ListCatRes, error)
	// ListFatherCat implements listFatherCat operation.
	//
	// List for FatherCats.
	//
	// GET /fathercat
	ListFatherCat(ctx context.Context, params ListFatherCatParams) (ListFatherCatRes, error)
	// ListKitten implements listKitten operation.
	//
	// List for Kittens.
	//
	// GET /kitten
	ListKitten(ctx context.Context, params ListKittenParams) (ListKittenRes, error)
	// ReadBreed implements readBreed operation.
	//
	// Finds the Breed with the requested ID and returns it.
	//
	// GET /breed/{id}
	ReadBreed(ctx context.Context, params ReadBreedParams) (ReadBreedRes, error)
	// ReadCat implements readCat operation.
	//
	// Finds the Cat with the requested ID and returns it.
	//
	// GET /cat/{id}
	ReadCat(ctx context.Context, params ReadCatParams) (ReadCatRes, error)
	// ReadFatherCat implements readFatherCat operation.
	//
	// Finds the FatherCat with the requested ID and returns it.
	//
	// GET /fathercat/{id}
	ReadFatherCat(ctx context.Context, params ReadFatherCatParams) (ReadFatherCatRes, error)
	// ReadKitten implements readKitten operation.
	//
	// Finds the Kitten with the requested ID and returns it.
	//
	// GET /kitten/{id}
	ReadKitten(ctx context.Context, params ReadKittenParams) (ReadKittenRes, error)
	// UpdateBreed implements updateBreed operation.
	//
	// Update Breed  and persists it to storage.
	//
	// PUT /breed/{id}
	UpdateBreed(ctx context.Context, req *UpdateBreed, params UpdateBreedParams) (UpdateBreedRes, error)
	// UpdateCat implements updateCat operation.
	//
	// Update Cat  and persists it to storage.
	//
	// PUT /cat/{id}
	UpdateCat(ctx context.Context, req *UpdateCat, params UpdateCatParams) (UpdateCatRes, error)
	// UpdateFatherCat implements updateFatherCat operation.
	//
	// Update FatherCat  and persists it to storage.
	//
	// PUT /fathercat/{id}
	UpdateFatherCat(ctx context.Context, req *UpdateFatherCat, params UpdateFatherCatParams) (UpdateFatherCatRes, error)
	// UpdateKitten implements updateKitten operation.
	//
	// Update Kitten  and persists it to storage.
	//
	// PUT /kitten/{id}
	UpdateKitten(ctx context.Context, req *UpdateKitten, params UpdateKittenParams) (UpdateKittenRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
