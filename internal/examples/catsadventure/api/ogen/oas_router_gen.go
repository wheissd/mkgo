// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "breed"
				origElem := elem
				if l := len("breed"); len(elem) >= l && elem[0:l] == "breed" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListBreedRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateBreedRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteBreedRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadBreedRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateBreedRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "cat"
				origElem := elem
				if l := len("cat"); len(elem) >= l && elem[0:l] == "cat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListCatRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateCatRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'f': // Prefix: "fathercat"
				origElem := elem
				if l := len("fathercat"); len(elem) >= l && elem[0:l] == "fathercat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListFatherCatRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateFatherCatRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteFatherCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadFatherCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateFatherCatRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'k': // Prefix: "kitten"
				origElem := elem
				if l := len("kitten"); len(elem) >= l && elem[0:l] == "kitten" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListKittenRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateKittenRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteKittenRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleReadKittenRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateKittenRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'b': // Prefix: "breed"
				origElem := elem
				if l := len("breed"); len(elem) >= l && elem[0:l] == "breed" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListBreed"
						r.summary = "List for Breeds"
						r.operationID = "listBreed"
						r.pathPattern = "/breed"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateBreed"
						r.summary = "Create a new Breed"
						r.operationID = "createBreed"
						r.pathPattern = "/breed"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteBreed
							r.name = "DeleteBreed"
							r.summary = "Delete Breed"
							r.operationID = "deleteBreed"
							r.pathPattern = "/breed/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadBreed
							r.name = "ReadBreed"
							r.summary = "Find a Breed by ID"
							r.operationID = "readBreed"
							r.pathPattern = "/breed/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateBreed
							r.name = "UpdateBreed"
							r.summary = "Update Breed"
							r.operationID = "updateBreed"
							r.pathPattern = "/breed/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "cat"
				origElem := elem
				if l := len("cat"); len(elem) >= l && elem[0:l] == "cat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListCat"
						r.summary = "List for Cats"
						r.operationID = "listCat"
						r.pathPattern = "/cat"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateCat"
						r.summary = "Create a new Cat"
						r.operationID = "createCat"
						r.pathPattern = "/cat"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteCat
							r.name = "DeleteCat"
							r.summary = "Delete Cat"
							r.operationID = "deleteCat"
							r.pathPattern = "/cat/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadCat
							r.name = "ReadCat"
							r.summary = "Find a Cat by ID"
							r.operationID = "readCat"
							r.pathPattern = "/cat/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateCat
							r.name = "UpdateCat"
							r.summary = "Update Cat"
							r.operationID = "updateCat"
							r.pathPattern = "/cat/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'f': // Prefix: "fathercat"
				origElem := elem
				if l := len("fathercat"); len(elem) >= l && elem[0:l] == "fathercat" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListFatherCat"
						r.summary = "List for FatherCats"
						r.operationID = "listFatherCat"
						r.pathPattern = "/fathercat"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateFatherCat"
						r.summary = "Create a new FatherCat"
						r.operationID = "createFatherCat"
						r.pathPattern = "/fathercat"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteFatherCat
							r.name = "DeleteFatherCat"
							r.summary = "Delete FatherCat"
							r.operationID = "deleteFatherCat"
							r.pathPattern = "/fathercat/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadFatherCat
							r.name = "ReadFatherCat"
							r.summary = "Find a FatherCat by ID"
							r.operationID = "readFatherCat"
							r.pathPattern = "/fathercat/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateFatherCat
							r.name = "UpdateFatherCat"
							r.summary = "Update FatherCat"
							r.operationID = "updateFatherCat"
							r.pathPattern = "/fathercat/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'k': // Prefix: "kitten"
				origElem := elem
				if l := len("kitten"); len(elem) >= l && elem[0:l] == "kitten" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListKitten"
						r.summary = "List for Kittens"
						r.operationID = "listKitten"
						r.pathPattern = "/kitten"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateKitten"
						r.summary = "Create a new Kitten"
						r.operationID = "createKitten"
						r.pathPattern = "/kitten"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteKitten
							r.name = "DeleteKitten"
							r.summary = "Delete Kitten"
							r.operationID = "deleteKitten"
							r.pathPattern = "/kitten/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadKitten
							r.name = "ReadKitten"
							r.summary = "Find a Kitten by ID"
							r.operationID = "readKitten"
							r.pathPattern = "/kitten/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateKitten
							r.name = "UpdateKitten"
							r.summary = "Update Kitten"
							r.operationID = "updateKitten"
							r.pathPattern = "/kitten/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
