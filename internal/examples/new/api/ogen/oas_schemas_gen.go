// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"fmt"

	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/DefaultModel
type DefaultModel struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetID returns the value of ID.
func (s *DefaultModel) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DefaultModel) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *DefaultModel) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DefaultModel) SetName(val string) {
	s.Name = val
}

func (*DefaultModel) readDefaultModelRes() {}

type DefaultModelList []DefaultModel

// DefaultModelListHeaders wraps DefaultModelList with response headers.
type DefaultModelListHeaders struct {
	ContentRange int
	Response     DefaultModelList
}

// GetContentRange returns the value of ContentRange.
func (s *DefaultModelListHeaders) GetContentRange() int {
	return s.ContentRange
}

// GetResponse returns the value of Response.
func (s *DefaultModelListHeaders) GetResponse() DefaultModelList {
	return s.Response
}

// SetContentRange sets the value of ContentRange.
func (s *DefaultModelListHeaders) SetContentRange(val int) {
	s.ContentRange = val
}

// SetResponse sets the value of Response.
func (s *DefaultModelListHeaders) SetResponse(val DefaultModelList) {
	s.Response = val
}

func (*DefaultModelListHeaders) listDefaultModelRes() {}

type ErrorItem struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ErrorItem) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorItem) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ErrorItem) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorItem) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps []ErrorItem with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   []ErrorItem
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() []ErrorItem {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val []ErrorItem) {
	s.Response = val
}

type ListDefaultModelBadRequestApplicationJSON []R400Item

func (*ListDefaultModelBadRequestApplicationJSON) listDefaultModelRes() {}
func (*ListDefaultModelBadRequestApplicationJSON) readDefaultModelRes() {}

type ListDefaultModelConflictApplicationJSON []R409Item

func (*ListDefaultModelConflictApplicationJSON) listDefaultModelRes() {}
func (*ListDefaultModelConflictApplicationJSON) readDefaultModelRes() {}

type ListDefaultModelInternalServerErrorApplicationJSON []R500Item

func (*ListDefaultModelInternalServerErrorApplicationJSON) listDefaultModelRes() {}
func (*ListDefaultModelInternalServerErrorApplicationJSON) readDefaultModelRes() {}

type ListDefaultModelNotFoundApplicationJSON []R404Item

func (*ListDefaultModelNotFoundApplicationJSON) listDefaultModelRes() {}
func (*ListDefaultModelNotFoundApplicationJSON) readDefaultModelRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400Item struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *R400Item) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *R400Item) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *R400Item) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *R400Item) SetMessage(val string) {
	s.Message = val
}

type R404Item struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *R404Item) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *R404Item) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *R404Item) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *R404Item) SetMessage(val string) {
	s.Message = val
}

type R409Item struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *R409Item) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *R409Item) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *R409Item) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *R409Item) SetMessage(val string) {
	s.Message = val
}

type R500Item struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *R500Item) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *R500Item) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *R500Item) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *R500Item) SetMessage(val string) {
	s.Message = val
}
