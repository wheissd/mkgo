// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wheissd/mkgo/internal/examples/new/ent/gen/defaultmodel"
	"github.com/wheissd/mkgo/internal/examples/new/ent/gen/predicate"
)

// DefaultModelUpdate is the builder for updating DefaultModel entities.
type DefaultModelUpdate struct {
	config
	hooks    []Hook
	mutation *DefaultModelMutation
}

// Where appends a list predicates to the DefaultModelUpdate builder.
func (dmu *DefaultModelUpdate) Where(ps ...predicate.DefaultModel) *DefaultModelUpdate {
	dmu.mutation.Where(ps...)
	return dmu
}

// SetName sets the "name" field.
func (dmu *DefaultModelUpdate) SetName(s string) *DefaultModelUpdate {
	dmu.mutation.SetName(s)
	return dmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dmu *DefaultModelUpdate) SetNillableName(s *string) *DefaultModelUpdate {
	if s != nil {
		dmu.SetName(*s)
	}
	return dmu
}

// Mutation returns the DefaultModelMutation object of the builder.
func (dmu *DefaultModelUpdate) Mutation() *DefaultModelMutation {
	return dmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dmu *DefaultModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dmu.sqlSave, dmu.mutation, dmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmu *DefaultModelUpdate) SaveX(ctx context.Context) int {
	affected, err := dmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dmu *DefaultModelUpdate) Exec(ctx context.Context) error {
	_, err := dmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmu *DefaultModelUpdate) ExecX(ctx context.Context) {
	if err := dmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmu *DefaultModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(defaultmodel.Table, defaultmodel.Columns, sqlgraph.NewFieldSpec(defaultmodel.FieldID, field.TypeUUID))
	if ps := dmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmu.mutation.Name(); ok {
		_spec.SetField(defaultmodel.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dmu.mutation.done = true
	return n, nil
}

// DefaultModelUpdateOne is the builder for updating a single DefaultModel entity.
type DefaultModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefaultModelMutation
}

// SetName sets the "name" field.
func (dmuo *DefaultModelUpdateOne) SetName(s string) *DefaultModelUpdateOne {
	dmuo.mutation.SetName(s)
	return dmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dmuo *DefaultModelUpdateOne) SetNillableName(s *string) *DefaultModelUpdateOne {
	if s != nil {
		dmuo.SetName(*s)
	}
	return dmuo
}

// Mutation returns the DefaultModelMutation object of the builder.
func (dmuo *DefaultModelUpdateOne) Mutation() *DefaultModelMutation {
	return dmuo.mutation
}

// Where appends a list predicates to the DefaultModelUpdate builder.
func (dmuo *DefaultModelUpdateOne) Where(ps ...predicate.DefaultModel) *DefaultModelUpdateOne {
	dmuo.mutation.Where(ps...)
	return dmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dmuo *DefaultModelUpdateOne) Select(field string, fields ...string) *DefaultModelUpdateOne {
	dmuo.fields = append([]string{field}, fields...)
	return dmuo
}

// Save executes the query and returns the updated DefaultModel entity.
func (dmuo *DefaultModelUpdateOne) Save(ctx context.Context) (*DefaultModel, error) {
	return withHooks(ctx, dmuo.sqlSave, dmuo.mutation, dmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dmuo *DefaultModelUpdateOne) SaveX(ctx context.Context) *DefaultModel {
	node, err := dmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dmuo *DefaultModelUpdateOne) Exec(ctx context.Context) error {
	_, err := dmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmuo *DefaultModelUpdateOne) ExecX(ctx context.Context) {
	if err := dmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dmuo *DefaultModelUpdateOne) sqlSave(ctx context.Context) (_node *DefaultModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(defaultmodel.Table, defaultmodel.Columns, sqlgraph.NewFieldSpec(defaultmodel.FieldID, field.TypeUUID))
	id, ok := dmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "DefaultModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaultmodel.FieldID)
		for _, f := range fields {
			if !defaultmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != defaultmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dmuo.mutation.Name(); ok {
		_spec.SetField(defaultmodel.FieldName, field.TypeString, value)
	}
	_node = &DefaultModel{config: dmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dmuo.mutation.done = true
	return _node, nil
}
